<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Samuel Calderon</title>
<link>https://calderonsamuel.github.io/web/posts/index.html</link>
<atom:link href="https://calderonsamuel.github.io/web/posts/index.xml" rel="self" type="application/rss+xml"/>
<description>Web de Samuel Calderon</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Mon, 11 Sep 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Strengthen your no-code apps with R code: appsheet 0.1.0</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2023-09-11-launching-appsheet/index.html</link>
  <description><![CDATA[ 



<p>This blog post serves two purposes:</p>
<ol type="1">
<li>To explain why no-code apps might be useful to you.</li>
<li>To announce the release of <a href="https://calderonsamuel.github.io/appsheet/"><code>{appsheet}</code></a> 0.1.0 to the world. It allows to interact with Google’s Appsheet API to read, add, edit and delete data from AppSheet tables.</li>
</ol>
<p>So, let’s understand why no-code apps might be important for an R user.</p>
<section id="why-no-code-apps" class="level1">
<h1>Why no-code apps?</h1>
<p>Maybe the first thing that comes to your mind as an R user/developer when talking about app development is, naturally, <a href="https://www.rstudio.com/products/shiny/">shiny</a>. It is true that the shiny ecosystem is big, keeps growing, and offers a wide variety of customization for your apps/dashboards, but for small to medium-sized businesses, it might not be the cheapest or easiest option.</p>
<p>In those types of businesses, you’ll often find data stored in spreadsheets that get fed manually (row by row) or by some kind of digital form. This is true not just for these kinds of businesses but for small offices in big organizations too, especially outside the tech world. When attempting to upgrade the data collection flow, many of these organizations opt for no-code alternatives. While I consider this a pretty good solution for data collection and data storage, I believe that the data analysis process might benefit from using our favorite programming language: R.</p>
<p>To be 100% transparent, the creation of this package comes from my experience in a big governmental organization, where the IT department didn’t want to deploy a custom-made shiny app and didn’t even allow my team to deploy it on a shinyapps.io free-tier instance. Hey, that’s life. So, for new projects, I decided to use a no-code alternative that took advantage of the cloud storage provided for the email service: Google’s Appsheet.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://calderonsamuel.github.io/web/posts/2023-09-11-launching-appsheet/iq.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Sometimes, easier is easier</figcaption>
</figure>
</div>
<p>Appsheet allows you to build apps pretty fast based on data you already have. You can feed it a Google Sheet (and other data storage formats) and it will generate Views and Forms for your app users to interact with. With some knowledge of relational databases, you can get a pretty decent looking app for desktop and mobile devices that you can customize in just a few hours of work.</p>
</section>
<section id="why-r-with-no-code-apps" class="level1">
<h1>Why R with no-code apps</h1>
<p>Where it still has plenty of room to grow is in the data analysis space. While it is possible to have tables, histograms, pie charts, donut charts, column plots, scatter plots, and even maps, the only aggregation options are count, average, min and max. If you want to see the value of a specific column, you <strong>have</strong> to hover on it.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://calderonsamuel.github.io/web/posts/2023-09-11-launching-appsheet/hover.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">In this plot you can only see the value of the “Devuelto” column</figcaption>
</figure>
</div>
<p>What if instead of a plot you want a table that shows the same information (count based on a column)? You can’t have it. I mean, you can have it if you implement <a href="https://www.googlecloudcommunity.com/gc/AppSheet-Q-A/Creating-a-summary-table/m-p/234056#M16542">some ultra complicated automation workflow</a>, but at that point, why don’t you just use R?</p>
<p>That’s why I created this package. I wanted a way to interact with Appsheet’s API with my favorite language, taking advantage of the power of Quarto and the tidyverse for data cleaning, visualization and reporting. Now, anyone who wants to do the same thing doesn’t need to start from scratch.</p>
</section>
<section id="operations" class="level1">
<h1>The four basic operations</h1>
<p>The first step is to <a href="https://support.google.com/appsheet/answer/10105769?hl=en&amp;ref_topic=10105767&amp;sjid=7476345061548698748-SA">Enable the API for cloud-based service communication</a>. Once this is done you should have:</p>
<ol type="1">
<li>The App ID. Use it in the <code>appId</code> argument of <code>appsheet()</code> or via the <code>APPSHEET_APP_ID</code> environmental variable.</li>
<li>The Application Access Key. Use it in the <code>access_key</code> argument of <code>appsheet()</code> or via the <code>APPSHEET_APP_ACCESS_KEY</code> environmental variable.</li>
</ol>
<p>The <code>appsheet()</code> function looks for both environmental variables by default.</p>
<p>The API only exposes really basic operations: read, add, edit and remove table records. It all starts with loading the package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(appsheet)</span></code></pre></div>
</div>
<section id="read-a-table" class="level2">
<h2 class="anchored" data-anchor-id="read-a-table">Read a table</h2>
<p>The first argument of <code>appsheet()</code> is a table name. By default, <code>appsheet()</code> will use the “Find” action, which reads all the rows. The following code is the equivalent of using <code>appsheet(tableName = "Driver", Action = "Find")</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appsheet</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Driver"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; # A tibble: 7 × 7
#&gt;   `_RowNumber` Key      `Driver Name` Photo           Email `Phone Number` Jobs 
#&gt;   &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;         &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt;
#&gt; 1 2            70608c66 Driver 1      Driver_Images/… driv… 1-206-555-1000 db9e…
#&gt; 2 3            261fadec Driver 2      Driver_Images/… driv… 1-206-555-1001 36a4…
#&gt; 3 4            525982c5 Driver 3      Driver_Images/… driv… 1-206-555-1002 1db9…
#&gt; 4 5            90eb1244 Driver 4      Driver_Images/… driv… 1-206-555-1003 e367…
#&gt; 5 6            ddb26f78 Driver 5      Driver_Images/… driv… 1-206-555-1004 5420…
#&gt; 6 7            29671cfb Driver 6      Driver_Images/… driv… 1-206-555-1005 98ed…
#&gt; 7 8            7a6fafca Driver 7      Driver_Images/… driv… 1-206-555-1006 0b64…</code></pre>
</div>
</div>
<p>When the action is “Find”, you can take advantage of the <code>Selector</code> argument of <code>ash_properties()</code>, which can use some AppSheet internal functions to narrow the output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appsheet</span>(</span>
<span id="cb4-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tableName =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Driver"</span>, </span>
<span id="cb4-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ash_properties</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Selector =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Filter(Driver, [Key] = "70608c66")'</span>)</span>
<span id="cb4-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; # A tibble: 1 × 7
#&gt;   `_RowNumber` Key      `Driver Name` Photo           Email `Phone Number` Jobs 
#&gt;   &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;         &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt;
#&gt; 1 2            70608c66 Driver 1      Driver_Images/… driv… 1-206-555-1000 db9e…</code></pre>
</div>
</div>
<p>The “Find” action is probably the one you’ll find yourself spending most time with</p>
</section>
<section id="add-records-to-a-table" class="level2">
<h2 class="anchored" data-anchor-id="add-records-to-a-table">Add records to a table</h2>
<p>The “Add” action allows to add one or multiple records to a table. You must provide <code>Rows</code>, which can be a dataframe with the same column names as the specified table. You don’t need to provide all the columns to be successful, but can’t exclude the ones <em>required</em> by your app. Also, don’t try to add the <code>_RowNumber</code>(or <code>Row ID</code> when using an AppsSheet database), as it is generated internally.</p>
<p>An “Add” action returns a data.frame with the added rows when successful.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">row_key <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to be reused </span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appsheet</span>(</span>
<span id="cb6-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tableName =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Driver"</span>,</span>
<span id="cb6-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Action =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Add"</span>,</span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb6-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> row_key, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># required in app logic</span></span>
<span id="cb6-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Email</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"driverXX@company.com"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># required in app logic</span></span>
<span id="cb6-9">    ) </span>
<span id="cb6-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; # A tibble: 1 × 7
#&gt;   `_RowNumber` Key      `Driver Name` Photo Email           `Phone Number` Jobs 
#&gt;   &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;
#&gt; 1 9            lcyieurm ""            ""    driverXX@compa… ""             ""</code></pre>
</div>
</div>
</section>
<section id="update-records-from-a-table" class="level2">
<h2 class="anchored" data-anchor-id="update-records-from-a-table">Update records from a table</h2>
<p>The “Edit” action allow to update values from one or multiple records from a table, it also can target multiple columns. This one also requires the <code>Rows</code> argument. Again, you can’t use the <code>_RowNumber</code> column (but in this one you can use the <code>Row ID</code> generated by an Appsheet database).</p>
<p>An “Edit” action returns a data.frame with the whole content of the updated rows when successful.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appsheet</span>(</span>
<span id="cb8-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tableName =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Driver"</span>,</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Action =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Edit"</span>,</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb8-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> row_key,</span>
<span id="cb8-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Driver Name</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some name"</span>,</span>
<span id="cb8-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Photo =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some/path.jpg"</span></span>
<span id="cb8-8">    ) </span>
<span id="cb8-9">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; # A tibble: 1 × 7
#&gt;   `_RowNumber` Key      `Driver Name` Photo         Email   `Phone Number` Jobs 
#&gt;   &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt;
#&gt; 1 9            lcyieurm Some name     some/path.jpg driver… ""             ""</code></pre>
</div>
</div>
</section>
<section id="delete-records-from-a-table" class="level2">
<h2 class="anchored" data-anchor-id="delete-records-from-a-table">Delete records from a table</h2>
<p>The “Delete” action allows to delete one or multiple records from a table. This one also requires the <code>Rows</code> argument. Again, you can’t use the <code>_RowNumber</code> column (but in this one you can use the <code>Row ID</code> generated by an Appsheet database).</p>
<p>A “Delete” action returns a data.frame with the deleted rows when successful.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appsheet</span>(</span>
<span id="cb10-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tableName =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Driver"</span>,</span>
<span id="cb10-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Action =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Delete"</span>,</span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb10-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> row_key</span>
<span id="cb10-6">    ) </span>
<span id="cb10-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; # A tibble: 1 × 7
#&gt;   `_RowNumber` Key      `Driver Name` Photo         Email   `Phone Number` Jobs 
#&gt;   &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt;
#&gt; 1 9            lcyieurm Some name     some/path.jpg driver… ""             ""</code></pre>
</div>
</div>
</section>
</section>
<section id="automate-reporting-with-github-actions" class="level1">
<h1>Automate reporting with Github actions</h1>
<p>To take the advantage of the API, you can automate the creation of your reports. <a href="https://github.com/features/actions">Github Actions</a> is a pretty popular choice to set a temporary computing environment for different tasks. Here, I show you just the necessary for you to create your report with Quarto and send it via email. At this point you should already have your Appsheet enviromental variables.</p>
<p>The next thing you need is to have your project set up as a Github repo. If you don’t know how to do this, you can check the following chapter in <a href="https://happygitwithr.com/existing-github-last">Happy Git and Github for the useR</a>. To be extra safe, you can configure your project to use <a href="https://rstudio.github.io/renv/articles/renv.html"><code>{renv}</code></a> for a reproducible environment.</p>
<p>Next, you need a quarto document with the contents of your report to be rendered. Inside this report is where you should use <code>{appsheet}</code> and your favorite data processing and visualization packages.</p>
<p>At the same directory level, you can have an R script where you render the report (<code>quarto::render()</code> ftw) and send it via email with <code>{blastula}</code>. For that, be sure to check the article on <a href="https://pkgs.rstudio.com/blastula/articles/sending_using_smtp.html">Sending Email Using SMTP</a>.</p>
<p>Finally, you should set up a workflow YAML file in the <code>.github/workflows/</code> directory in your repository. Here you have a simplified example when your script is called <code>script.R</code>:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> workflow_dispatch</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Generate and send report</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb12-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reporting</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb12-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb12-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb12-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      # Environmental variables</span></span>
<span id="cb12-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GITHUB_PAT</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.GITHUB_TOKEN }}</span></span>
<span id="cb12-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">APPSHEET_APP_ID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.APPSHEET_APP_ID }}</span></span>
<span id="cb12-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">APPSHEET_APP_ACCESS_KEY</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.APPSHEET_APP_ACCESS_KEY }}</span></span>
<span id="cb12-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BLASTULA_EMAIL_CREDS</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.BLASTULA_EMAIL_CREDS }}</span></span>
<span id="cb12-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb12-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span></span>
<span id="cb12-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      # Checkout the git repo</span></span>
<span id="cb12-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb12-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span></span>
<span id="cb12-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      # Set up pandoc - I just keep it to be safe</span></span>
<span id="cb12-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> r-lib/actions/setup-pandoc@v2</span></span>
<span id="cb12-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span></span>
<span id="cb12-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      # Install R</span></span>
<span id="cb12-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> r-lib/actions/setup-r@v2</span></span>
<span id="cb12-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span></span>
<span id="cb12-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      # Install quarto    </span></span>
<span id="cb12-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> quarto-dev/quarto-actions/setup@v2</span></span>
<span id="cb12-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span></span>
<span id="cb12-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      # Install the necessary packages with renv</span></span>
<span id="cb12-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> r-lib/actions/setup-renv@v2</span></span>
<span id="cb12-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span></span>
<span id="cb12-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Run rendering script</span></span>
<span id="cb12-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb12-36">          Rscript script.R</span></code></pre></div>
<p>Of course, there are ways of optimizing your workflow file and to strengthen the security of your script. Another thing to consider is that you have a limit of 2000 minutes a month of compute time for private repos in the free version (no limit on public repos).</p>
<p>Here you have a repo where I set up an automatic reporting schedule with all the steps described before: <a href="https://github.com/ddc-research/auto-pronabi" class="uri">https://github.com/ddc-research/auto-pronabi</a>. It takes around 2 minutes for the job to complete and it’s totally free and safe.</p>


</section>

 ]]></description>
  <category>rweekly</category>
  <category>package</category>
  <category>no-code</category>
  <category>appsheet</category>
  <guid>https://calderonsamuel.github.io/web/posts/2023-09-11-launching-appsheet/index.html</guid>
  <pubDate>Mon, 11 Sep 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>On updating a chat assistant app for the RStudio IDE</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2023-06-02-updating-gptstudio/index.html</link>
  <description><![CDATA[ 



<p>This post summarizes the challenges overcomed while trying to improve three areas of the ChatGPT addin (shiny app) from <code>{gptstudio}</code>.</p>
<p>The whole journey began quite unexpectedly for me. I was developing a shiny app for my work and decided to venture into writing JavaScript code. However, I felt that the autocomplete feature in the RStudio IDE wasn’t the best available. So, I decided to give VSCode a shot.</p>
<p>As I’m not well versed with JS (or VSCode), I was requesting a lot of help from ChatGPT. That’s when I stumbled upon the <a href="https://github.com/ai-genie/chatgpt-vscode">Genie extension</a>, which integrates ChatGPT seamlessly into the IDE (provided you have a valid API key). That got me thinking: shouldn’t we have a similar integration for the RStudio IDE?</p>
<p>It turns out, I wasn’t the only one who had this idea. Version 0.1.0 of <code>{gptstudio}</code> was already on CRAN, so I decided to give its ChatGPT addin a try. To my surprise, it exceeded my expectations, and I was intrigued to explore it further. I enthusiastically checked out its GitHub repository and couldn’t resist giving it a well-deserved star. As I dug deeper, I made an unexpected discovery—an open issue with a <code>help wanted</code> label.</p>
<p><img src="https://calderonsamuel.github.io/web/posts/2023-06-02-updating-gptstudio/issue-64.png" class="img-fluid"></p>
<section id="run-shiny-app-in-background---issue-64" class="level2">
<h2 class="anchored" data-anchor-id="run-shiny-app-in-background---issue-64">Run Shiny App in Background - issue <a href="https://github.com/MichelNivard/gptstudio/issues/64">#64</a></h2>
<blockquote class="blockquote">
<p><em>Isn’t that the guy from the R4DS slack channel? Also, I agree with him</em></p>
</blockquote>
<p>This was the perfect issue to try to solve. Just a few days prior, I had watched a video discussing RStudio jobs for shiny apps. Although I couldn’t locate the video at the time of writing this, I did find a <a href="https://github.com/sol-eng/background-jobs/tree/main/shiny-job#viewing-the-app">README file</a> containing the relevant information.</p>
<p>To sum it up, I discovered that it is possible to launch an app as a background job and then open it from the R console. This functionality extends to shiny apps that are addins from a package. By doing this, you can have your background shiny app displayed in the Viewer pane of the RStudio IDE.</p>
<p>After trying this in my fork of the package, I documented all my code and submitted a Pull Request to the maintainers, which was integrated in very short time. I was very happy with this but still thought that there some things that could be improved.</p>
</section>
<section id="the-ui-should-resemble-a-chat" class="level2">
<h2 class="anchored" data-anchor-id="the-ui-should-resemble-a-chat">The UI should resemble a chat</h2>
<p>Even though at the moment you were able to have your chat assistant, the UI was a bit awkward to navigate when you had a long chat history. I had the intention to just move the text input to the bottom of the app, like in a chat window. In order to do that, I thought that I should incorporate shiny modules and separate the app into smaller, more manageable components. Okay, this was a couple more lines of code than I expected. After that, I thought that the viewer pane was very small to have a lot of controls always visible and decided to hide some inputs in a “Configuration” dropdown button.</p>
<p><em>But shiny doesn’t have native dropdown buttons. Should I import bs4Dash just to have them? Should I make my own? Maybe the theme colors are a bit weird. Should I change them? How on earth will I test all these changes? Will the previous tests even pass? I would love to have the app’s theme match the RStudio IDE theme of every user. I would also love to provide a welcome message to the users. Oh man, I would totally love to have a “Copy” button on every code chunk provided in the responses (this was the hardest thing to get done).</em></p>
<p>In the end, the small contribution I intended to make was <a href="https://github.com/MichelNivard/gptstudio/pull/78">59 commits long</a>, and I won’t even say how many files were affected. I was very hesitant to make a pull request for something nobody had asked for, so I went for the “Discussions” tab.</p>
<blockquote class="blockquote">
<p><em>Me: Hey guys, I did this. I haven’t done a PR yet because no one really asked for this…</em></p>
</blockquote>
<blockquote class="blockquote">
<p><em>JamesHWade: This is fantastic! I would very much welcome a PR. Great work!!!</em></p>
</blockquote>
<blockquote class="blockquote">
<p><em>MichelNivard: Amazing! Yes, please submit a PR. I would love this!</em></p>
</blockquote>
<p>Okay then. Pull request merged!! So, what was the difficult part? Here comes the code.</p>
<section id="the-copy-button" class="level3">
<h3 class="anchored" data-anchor-id="the-copy-button">The copy button</h3>
<p>As I said before, I really wanted to have a button to easily add any code chunk text to the user’s system clipboard. At the time, I was unsure about doing it in R or in JS. I’ll explain why.</p>
<p>When you send a prompt to ChatGPT, it will, by default, respond in markdown. You can easily convert that to HTML with <code>shiny::markdown()</code> and render it dynamically. A minimal shiny app to do that would look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="lst-minimal-app" data-caption="Minimal shiny app" style="background: #f1f3f5;"><pre class="sourceCode r lst code-with-copy"><code class="sourceCode r"><span id="lst-minimal-app-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="lst-minimal-app-2"></span>
<span id="lst-minimal-app-3">ask_chatgpt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(prompt) {</span>
<span id="lst-minimal-app-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code to make the request</span></span>
<span id="lst-minimal-app-5">}</span>
<span id="lst-minimal-app-6"></span>
<span id="lst-minimal-app-7">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="lst-minimal-app-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your prompt"</span>),</span>
<span id="lst-minimal-app-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">actionButton</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"send"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Send prompt"</span>),</span>
<span id="lst-minimal-app-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>)</span>
<span id="lst-minimal-app-11">)</span>
<span id="lst-minimal-app-12"></span>
<span id="lst-minimal-app-13">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="lst-minimal-app-14">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>reponse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderUI</span>({</span>
<span id="lst-minimal-app-15">    </span>
<span id="lst-minimal-app-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ask_chatgpt</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>prompt) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="lst-minimal-app-17">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">markdown</span>()</span>
<span id="lst-minimal-app-18">    </span>
<span id="lst-minimal-app-19">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="lst-minimal-app-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>send)</span>
<span id="lst-minimal-app-21">}</span>
<span id="lst-minimal-app-22"></span>
<span id="lst-minimal-app-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
<p>A flowchart representing this app would look like this:</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-process-minimal" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://calderonsamuel.github.io/web/posts/2023-06-02-updating-gptstudio/process-minimal.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;1: Flowchart of a minimal chat app</figcaption>
</figure>
</div>
</div>
</div>
<p>This receives a response, converts it to HTML, and sends it to the browser to be displayed. Every code chunk present would be wrapped inside a <code>&lt;pre&gt;</code> HTML tag, and because we aim to prepend a copy button to them, this tag should be the <em>selector</em> for any future manipulation.</p>
<p>Now, we need to decide whether to do it in R or in JS. My first instinct was to do it via JS once the full answer was rendered. I would need a listener for a render event on any <code>&lt;pre&gt;</code> tag. This was my first attempt:</p>
<div id="lst-js-first-attempt" class="cell" data-caption="First attempt in JS" data-eval="false">
<div class="sourceCode cell-code" id="cb1" data-startfrom="104" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 103;"><span id="cb1-104"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pre'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">each</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb1-105">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> $codeChunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-106">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> $copyButton <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;button&gt;'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Copy'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-107">  $codeChunk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prepend</span>($copyButton)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-108"></span>
<span id="cb1-109">  $copyButton<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'click'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb1-110">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> codeText <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> $codeChunk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-111">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">navigator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clipboard</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeText</span>(codeText)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-112">  })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-113">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-1" data-nodetype="expression">

</div>
</div>
</div>
<p>This can prepend a “Copy” button to a code chunk, but it doesn’t do it automatically after rendering. In fact, there is nothing in that code to handle the render event. I searched a lot for methods to achieve that, but unfortunately, I wasn’t able to find or understand the necessary code to implement it (remember that all this began because I wasn’t well-versed in JS). So, in the end, I would have to do it from R.</p>
<p>So, what is the best way to manipulate HTML tags in R? From my point of view, it is by using <code>htmltools::tagQuery()</code> and its corresponding methods. However, that function requires a <code>tag()</code>, <code>tagList()</code>, or a <code>list()</code> of tags. I didn’t have that. Compare these outputs:</p>
<div class="cell">
<div class="sourceCode cell-code" id="lst-comparison" data-caption="Comparison" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="lst-comparison-1">htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title 1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; [1] "shiny.tag"</code></pre>
</div>
<div class="sourceCode cell-code" id="lst-comparison" data-caption="Comparison" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="lst-comparison-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">markdown</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# Title 1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; [1] "html"      "character"</code></pre>
</div>
</div>
<p>Well then, can’t we just add the “shiny.tag” class to the rendered markdown to be able to use <code>tagQuery()</code>? Well…</p>
<div class="cell">
<div class="sourceCode cell-code" id="lst-tagquery-error" data-caption="tagQuery error" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="lst-tagquery-error-1">tag_example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">markdown</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# Title 1"</span>)</span>
<span id="lst-tagquery-error-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(tag_example) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(tag_example), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shiny.tag"</span>)</span>
<span id="lst-tagquery-error-3"></span>
<span id="lst-tagquery-error-4">htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagQuery</span>(tag_example)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre class="text-danger"><code>#&gt; Error in list2env(xList, new.env(parent = emptyenv())): first argument must be a named list</code></pre>
</div>
</div>
<p>I invite you to try to understand that error message. I, however, decided not to try. What should we do now? Is there a way to convert an <code>"html"</code> character to an object that <code>tagQuery()</code> can handle? Not that I knew of. But, after a not-so-quick Google search, I came across <a href="https://github.com/alandipert/html2r">this Github repo</a> where Alan Dipert had shared a shiny app to handle that conversion. His code covered almost every tag conversion, but it didn’t work for all my tests and used the <code>{XML}</code> package, which was totally unfamiliar to me.</p>
<p>I decided to implement a new version of the code with <code>{xml2}</code>, <code>{glue}</code>, and <code>{purrr}</code> at its core, which I managed to get working after several tries. You can see the code in <a href="https://github.com/calderonsamuel/gptstudio/blob/d5cd13c673eda1e70880f576972ce8fa355dcb58/R/html_to_taglist.R">this snapshot</a>.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(magrittr)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Convert HTML to a Tag List</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This function takes a character string of HTML code and returns a tag list that can be used to</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' display the HTML content in an R Markdown document or Shiny app. The resulting tag list can be</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' passed as an argument to the `htmltools::tagQuery()` function or used as an input to other HTML</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' rendering functions in R.</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param html A character string of HTML code</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A tag list that can be used to display the HTML content</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb5-13">html_to_taglist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(html) {</span>
<span id="cb5-14">  html <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_to_r</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> .) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb5-18">}</span>
<span id="cb5-19"></span>
<span id="cb5-20"></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Convert HTML to R Code</span></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This function takes a character string of HTML code and returns a styled R code that can be used</span></span>
<span id="cb5-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' to recreate the HTML structure. The resulting R code is a character string that can be copied and</span></span>
<span id="cb5-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' pasted into an R script or console.</span></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param html A character string of HTML code</span></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A character string of styled R code that can be used to recreate the HTML structure</span></span>
<span id="cb5-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb5-30">html_to_r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(html) {</span>
<span id="cb5-31">  html <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_str_to_nodeset</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-33">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(get_node_params) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-34">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(node_params_to_str) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-35">    glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue_collapse</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">into_taglist</span>()</span>
<span id="cb5-37">}</span>
<span id="cb5-38"></span>
<span id="cb5-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' HTML string to xml nodeset</span></span>
<span id="cb5-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This function takes HTML defined as a string and returns it as a xml_nodeset.</span></span>
<span id="cb5-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param str A character string that represents the HTML to be parsed</span></span>
<span id="cb5-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A nodeset representing the parsed HTML</span></span>
<span id="cb5-45">html_str_to_nodeset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(str) {</span>
<span id="cb5-46">  str <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-47">    xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_html</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-48">    xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_find_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./body/*"</span>)</span>
<span id="cb5-49">}</span>
<span id="cb5-50"></span>
<span id="cb5-51"></span>
<span id="cb5-52">node_is_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(node) xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_name</span>(node) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span></span>
<span id="cb5-53"></span>
<span id="cb5-54">node_text_is_empty <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(node) xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_text</span>(node, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trim =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb5-55"></span>
<span id="cb5-56">node_content_is_nodeset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(node) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xml_nodeset"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(node<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>contents)</span>
<span id="cb5-57"></span>
<span id="cb5-58">node_content_is_empty <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(node) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(node<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>content) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-59"></span>
<span id="cb5-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Get Nodeset Tag Contents</span></span>
<span id="cb5-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This function takes a nodeset and returns the contents of each tag.</span></span>
<span id="cb5-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param nodeset A nodeset representing a parsed HTML document</span></span>
<span id="cb5-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A character vector containing the contents of each tag in the nodeset</span></span>
<span id="cb5-66">get_nodeset_tag_contents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(nodeset) {</span>
<span id="cb5-67">  nodeset <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-68">    xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_contents</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-69">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discard</span>(\(node) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">node_is_text</span>(node) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">node_text_is_empty</span>(node))</span>
<span id="cb5-70">}</span>
<span id="cb5-71"></span>
<span id="cb5-72"></span>
<span id="cb5-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Get Node Parameters</span></span>
<span id="cb5-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This function takes a node and returns a list with its name, attributes, and contents.</span></span>
<span id="cb5-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This functions applies recursively to every element of its contents until the element is plain text or has no extra content.</span></span>
<span id="cb5-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param node A node representing an element or text node in a parsed HTML document</span></span>
<span id="cb5-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A list with the name, attributes, and contents of the node</span></span>
<span id="cb5-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-81">get_node_params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(node) {</span>
<span id="cb5-82">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">node_is_text</span>(node)) {</span>
<span id="cb5-83">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-84">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb5-85">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">attrs =</span> xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_attrs</span>(node),</span>
<span id="cb5-86">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contents =</span> xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_text</span>(node)</span>
<span id="cb5-87">    )</span>
<span id="cb5-88">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb5-89">    node_with_params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-90">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_name</span>(node),</span>
<span id="cb5-91">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">attrs =</span> xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_attrs</span>(node),</span>
<span id="cb5-92">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contents =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_nodeset_tag_contents</span>(node)</span>
<span id="cb5-93">    )</span>
<span id="cb5-94">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">node_content_is_nodeset</span>(node_with_params) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">node_content_is_empty</span>(node_with_params)) {</span>
<span id="cb5-95">      node_with_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>contents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> node_with_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>contents <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-96">        purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(get_node_params)</span>
<span id="cb5-97">    }</span>
<span id="cb5-98">    node_with_params</span>
<span id="cb5-99">  }</span>
<span id="cb5-100">}</span>
<span id="cb5-101"></span>
<span id="cb5-102"></span>
<span id="cb5-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Convert Attributes to Parameters</span></span>
<span id="cb5-104"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This function takes a named character vector representing attributes and returns a character string</span></span>
<span id="cb5-106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' that can be used as a parameter list in an HTML tag.</span></span>
<span id="cb5-107"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param attrs A named character vector representing attributes</span></span>
<span id="cb5-109"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A character string that can be used as a parameter list in an HTML tag</span></span>
<span id="cb5-110">attrs_to_params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(attrs) {</span>
<span id="cb5-111">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(attrs) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb5-112">  params_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(attrs)</span>
<span id="cb5-113">  params_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(attrs)</span>
<span id="cb5-114">  params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`{params_names}` = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{params_values}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-115">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue_collapse</span>(params, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)</span>
<span id="cb5-116">}</span>
<span id="cb5-117"></span>
<span id="cb5-118"></span>
<span id="cb5-119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Convert Node Parameters to String</span></span>
<span id="cb5-120"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-121"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This function takes a list of parameters for an HTML tag and returns a character string that</span></span>
<span id="cb5-122"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' represents the tag with the given parameters. Aplies recursively to every child content until</span></span>
<span id="cb5-123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' content is text or empty.</span></span>
<span id="cb5-124"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-125"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param node_params A list of parameters for an HTML tag</span></span>
<span id="cb5-126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A character string that represents the tag with the given parameters</span></span>
<span id="cb5-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-128">node_params_to_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(node_params) {</span>
<span id="cb5-129">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (node_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>) {</span>
<span id="cb5-130">    safe_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>, node_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>contents)</span>
<span id="cb5-131">    glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'{safe_text}'"</span>)</span>
<span id="cb5-132">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb5-133">    tag_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"htmltools::tags${node_params$name}"</span>)</span>
<span id="cb5-134">    params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attrs_to_params</span>(node_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>attrs)</span>
<span id="cb5-135">    contents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> node_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>contents</span>
<span id="cb5-136">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(contents) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb5-137">      contents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> contents <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-138">        purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(node_params_to_str) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-139">        glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue_collapse</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)</span>
<span id="cb5-140">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># contents &lt;- paste0(", ", contents)</span></span>
<span id="cb5-141">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb5-142">      contents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb5-143">    }</span>
<span id="cb5-144">    fun_args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(params, contents)</span>
<span id="cb5-145">    fun_args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fun_args[fun_args <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>]</span>
<span id="cb5-146">    fun_args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(fun_args, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)</span>
<span id="cb5-147">    glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{tag_name}({fun_args})"</span>)</span>
<span id="cb5-148">  }</span>
<span id="cb5-149">}</span>
<span id="cb5-150"></span>
<span id="cb5-151"></span>
<span id="cb5-152"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Paste tags string inside a tagList</span></span>
<span id="cb5-153"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-154"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This function takes a list of HTML tags and returns a character string that, when evaluated,</span></span>
<span id="cb5-155"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' will produce a tagList object containing the given tags.</span></span>
<span id="cb5-156"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-157"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param tags_str A list of HTML tags</span></span>
<span id="cb5-158"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A character string that, when evaluated, will produce a tagList object containing the given tags</span></span>
<span id="cb5-159">into_taglist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tags_str) {</span>
<span id="cb5-160">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"htmltools::tagList({tags_str})"</span>)</span>
<span id="cb5-161">}</span></code></pre></div>
</details>
</div>
<p>After that, I was able to run the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">md_example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# Title</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Some paragraph content.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"># some code content</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```"</span></span>
<span id="cb6-2">md_rendered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">markdown</span>(md_example)</span>
<span id="cb6-3">md_translated <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_to_taglist</span>(md_rendered)</span>
<span id="cb6-4"></span>
<span id="cb6-5">tq_example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagQuery</span>(md_translated)</span>
<span id="cb6-6"></span>
<span id="cb6-7">tq_example</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; `$allTags()`:
#&gt; &lt;h1&gt;Title&lt;/h1&gt;
#&gt; &lt;p&gt;Some paragraph content.&lt;/p&gt;
#&gt; &lt;pre&gt;
#&gt;   &lt;code&gt;# some code content
#&gt; &lt;/code&gt;
#&gt; &lt;/pre&gt;
#&gt; 
#&gt; `$selectedTags()`: `$allTags()`</code></pre>
</div>
</div>
<p>This meant that I was able to use <code>tagQuery()</code>! With this, prepending a copy button is not so difficult. You just need a combination of <code>htmltools::tags$button()</code> and <code>tq$children('pre')$before()</code>. Of course, you also need to handle the copy action in JS, which was already done in the first attempt. So, all of this was integrated into the development version of <code>{gptstudio}</code>.</p>
<p>At this point, the flowchart of the app would look like this:</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-process-html-to-r" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://calderonsamuel.github.io/web/posts/2023-06-02-updating-gptstudio/process-html-to-r.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;2: Flowchart including translation to shiny.tag</figcaption>
</figure>
</div>
</div>
</div>
<p>Now, let’s take a look at what happens when we compare the character contents of <code>md_rendered</code> and <code>md_translated</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(md_rendered)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; [1] "&lt;h1&gt;Title&lt;/h1&gt;\n&lt;p&gt;Some paragraph content.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# some code content\n&lt;/code&gt;&lt;/pre&gt;\n"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(md_translated)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; [1] "&lt;h1&gt;Title&lt;/h1&gt;\n&lt;p&gt;Some paragraph content.&lt;/p&gt;\n&lt;pre&gt;\n  &lt;code&gt;# some code content\n&lt;/code&gt;\n&lt;/pre&gt;"</code></pre>
</div>
</div>
<p>My translation inserts unnecessary white space between the opening of the <code>&lt;pre&gt;</code> and the <code>&lt;code&gt;</code> tags. This results in a weird “indentation” on the first line of every code chunk. This didn’t break the app’s behavior but it was ugly, and I wasn’t really sure why this was happening or how to fix it.</p>
<p>Fortunately, <a href="https://github.com/idavydov">Iakov Davydov</a> took notice of it and, in addition to fixing the translation, actually implemented the copy button mechanism in JS, super-seeding my translation efforts. This person also wrote the original attempt at using the “Enter” key as an alternative to clicking the “Send” button.</p>
<p>With this, the app could be represented with the following flowchart:</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-process-copy-btn-in-js" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://calderonsamuel.github.io/web/posts/2023-06-02-updating-gptstudio/process-copy-btn-in-js.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;3: Flowchart including JS process</figcaption>
</figure>
</div>
</div>
</div>
<p>Of course, this is a lot simpler. All of this was added in the development version of the package, and my translation code had to be removed. This was bittersweet because it wasn’t too easy to achieve, but I understood that it was for the better.</p>
</section>
</section>
<section id="receiving-a-response-shouldnt-take-too-long" class="level2">
<h2 class="anchored" data-anchor-id="receiving-a-response-shouldnt-take-too-long">Receiving a response shouldn’t take too long</h2>
<p>At this point we had a better looking app with friendlier input controls. But rendering a response was s-l-o-w. The app had to wait for the whole answer before rendering it. If you look carefully at Figure&nbsp;3 you’ll see that it represents a sequential flow. We need to wait for <code>ask_chatgpt()</code> to complete before doing anything with the response. But this is not the experience people have while using the original ChatGPT.</p>
<p>In the web, you can see the response being generated in real time almost word by word with a typewriter-like <em>effect</em>. In fact, my first assumption was that the ChatGPT web app received its full response much faster than I did with my API requests because of my slow (Peruvian) connection, and that once it had the full response, it rendered it with a typewriter-like animation to ease the user’s reading process.</p>
<p>Well, I was totally wrong. It turns out that the API offers the option to <em>stream</em> the response. This means that you can get the response while it is being generated, chunk by chunk. So, the typewriter-like effect doesn’t actually exist, the response is being constantly rendered while the chunks arrive.</p>
<p>So, to get the same thing in <code>{gptstudio}</code> we should just activate the stream option right? Well, yes, but the flow described in Figure&nbsp;3 can’t render the response while it is being streamed. This requires a two step solution that I’ll describe now.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Before you continue reading this section, I want to say that what comes can be hard to understand. I’m focusing on providing <em>clear</em> explanations rather than <em>precise</em> ones. There are some additional processes going on in the chat app that I don’t talk about to avoid distractions.</p>
<p>In addition, I’m a Peruvian political scientist turned self-taught data analyst, not a computer scientist or a software engineer. So, be patient with me if I happen to have gaps in my programming knowledge, or if I don’t use technical terms with precision, or even if I don’t use English correctly. Having that clear, let’s continue.</p>
</div>
</div>
<section id="read-the-stream-in-r" class="level3">
<h3 class="anchored" data-anchor-id="read-the-stream-in-r">Read the stream in R</h3>
<p>At this point in time, I’m not aware of any R project that uses streaming for the OpenAI API. Making <em>traditional</em> http requests is rather straight forward with <code>{httr2}</code>. In fact, the internals of <code>{gptstudio}</code> where all based on <code>{httr}</code> functions that were later translated to <code>{httr2}</code>. So, how can we use streaming for this project?</p>
<p>The API documentation provides a <a href="https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb">guide</a> on how to stream completions. EZ, you just need to use the <code>openai</code> python library! I imagine there are ways to wrap that library and access it from an app to be used as an addin in RStudio, but I also imagine it would make the setup much more harder than it needs to be.</p>
<p>The OpenAI team also supports an <a href="https://github.com/openai/openai-node">official Node.js library</a>, but it’s README file states that it doesn’t natively support streaming. So, no easy way to stream chat completions from JS either. It is worth mentioning that setting up a Node.js package to be used in the app would’ve still been very hard for me (remember that all these began with me being bad at writing JS code?). So R it is.</p>
<p>As I mentioned before, we were using <code>{httr2}</code> for every API interaction. This package provides a <a href="https://httr2.r-lib.org/reference/req_stream.html"><code>req_stream()</code></a> function that aims to facilitate streaming and sounded really promising. But a problem arised quickly: the format of the streaming response was hard to process.</p>
<p>To illustrate the problem, let’s consider prompting “Count from 1 to 5” and receiving a chat completion response without streaming. After after assigning it to the <code>resp_example</code> object, it would look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">resp_example</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; {
#&gt;   "metadata": "some-metadata",
#&gt;   "choices": [
#&gt;     {
#&gt;       "message": {
#&gt;         "role": "assistant",
#&gt;         "content": "1, 2, 3, 4, 5"
#&gt;       }
#&gt;     }
#&gt;   ],
#&gt;   "other-metadata": "more-metadata"
#&gt; }</code></pre>
</div>
</div>
<p>The real content of the response is located inside <code>resp_example$choices[[1]]$message$content</code> (markdown). The length of this string is directly proportional to the time it takes to receive the response. This operation is located in the <code>ask_chatgpt()</code> process in Figure&nbsp;3.</p>
<p>When we use <code>httr2::req_stream()</code> we receive the full <strong>response</strong> in chunks while they stream. If we provide the print function as a callback (to be applied at every chunk while it arrives) it would look like the following:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; [1] "{\n  \"me"
#&gt; [1] "tadata\""
#&gt; [1] ": \"some"
#&gt; [1] "-metada"
#&gt; [1] "ta\",\n  "
#&gt; [1] "\"choice"
#&gt; [1] "s\": [\n "
#&gt; [1] "   {\n  "
#&gt; [1] "    \"me"
#&gt; [1] "ssage\":"
#&gt; [1] " {\n    "
#&gt; [1] "    \"ro"
#&gt; [1] "le\": \"a"
#&gt; [1] "ssistan"
#&gt; [1] "t\",\n   "
#&gt; [1] "     \"c"
#&gt; [1] "ontent\""
#&gt; [1] ": \"1, 2"
#&gt; [1] ", 3, 4,"
#&gt; [1] " 5\"\n   "
#&gt; [1] "   }\n  "
#&gt; [1] "  }\n  ]"
#&gt; [1] ",\n  \"ot"
#&gt; [1] "her-met"
#&gt; [1] "adata\":"
#&gt; [1] " \"more-"
#&gt; [1] "metadat"
#&gt; [1] ""</code></pre>
</div>
</div>
<p>I assumed that was good enough. You can process the chunks as they arrive and apply some clever logic to pull out just the content of the response. This send me down a rabbit hole to get to that clever logic, and it turns out that processing an incomplete JSON with regular expressions is as fun as it sounds. Never forget this legendary quote:</p>
<blockquote class="blockquote">
<p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p>
<p>Jamie Zawinski</p>
</blockquote>
<p>Looking for an alternative, I checked the OpenAI guide again, and I realized that the python library returns not the full <strong>response</strong> in chunks, but just the <strong>content</strong> in chunks that individually can be treated as JSON text. How do they do it?</p>
<p>Another rabbit hole looking at the guts of the <a href="https://github.com/openai/openai-python"><code>openai</code></a> python library. Nothing there suggests that they are doing anything extraordinary to read the stream in chunks of the <strong>content</strong>. But a nice thing in a python script (even if it is located inside a library) is that you can always see directly the packages it imports. <a href="https://github.com/openai/openai-python/blob/fe3abd16b582ae784d8a73fd249bcdfebd5752c9/openai/api_requestor.py#L22">There</a> I found the <a href="https://requests.readthedocs.io/en/latest/"><code>requests</code></a> library being imported, which pointed me to the very low level <a href="https://urllib3.readthedocs.io/en/stable/"><code>urllib3</code></a> library.</p>
<p>What if we do the same exploration for R? <code>{gptstudio}</code> depends on <code>{httr2}</code>, which in turn depends on <code>{curl}</code>, which has <code>libcurl</code> as system requirement. Can <code>libcurl</code> do for <code>{gptstudio}</code> the same that <code>urllib3</code> does for the <code>openai</code> python library? The answer is YES!!! I tried the curl example from the OpenAI docs with stream activated directly in the terminal.</p>
<pre><code>curl https://api.openai.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d '{
    "model": "gpt-3.5-turbo",
    "messages": [{"role": "user", "content": "Count from 1 to 5"}],
    "stream": "true"
  }'</code></pre>
<p>And boom! It worked in the first try! And it gets better. It turns out that <code>{curl}</code> already provides the <code>curl_fetch_stream()</code> function to avoid messing directly with <code>libcurl</code> in the terminal. In fact, <code>httr2::req_stream()</code> makes use of that function, with the caveat that for some reason it streams the full <strong>response</strong> instead of the <strong>content</strong>, as I explained before.</p>
<p>Now, if we just pass the print method as a callback for <code>curl_fetch_stream()</code>, the streaming chunks look like this:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre class="text-muted"><code>#&gt; {
#&gt;   "choices": [
#&gt;     {
#&gt;       "delta": {
#&gt;         "content": "1, "
#&gt;       }
#&gt;     }
#&gt;   ],
#&gt;   "metadata": "some-metadata",
#&gt;   "other-metadata": "more-metadata"
#&gt; } 
#&gt; {
#&gt;   "choices": [
#&gt;     {
#&gt;       "delta": {
#&gt;         "content": "2,"
#&gt;       }
#&gt;     }
#&gt;   ],
#&gt;   "metadata": "some-metadata",
#&gt;   "other-metadata": "more-metadata"
#&gt; } 
#&gt; {
#&gt;   "choices": [
#&gt;     {
#&gt;       "delta": {
#&gt;         "content": " 3, "
#&gt;       }
#&gt;     }
#&gt;   ],
#&gt;   "metadata": "some-metadata",
#&gt;   "other-metadata": "more-metadata"
#&gt; } 
#&gt; {
#&gt;   "choices": [
#&gt;     {
#&gt;       "delta": {
#&gt;         "content": "4, "
#&gt;       }
#&gt;     }
#&gt;   ],
#&gt;   "metadata": "some-metadata",
#&gt;   "other-metadata": "more-metadata"
#&gt; } 
#&gt; {
#&gt;   "choices": [
#&gt;     {
#&gt;       "delta": {
#&gt;         "content": "5"
#&gt;       }
#&gt;     }
#&gt;   ],
#&gt;   "metadata": "some-metadata",
#&gt;   "other-metadata": "more-metadata"
#&gt; }</code></pre>
</div>
</div>
<p>As you can see, every chunk is the same, except for the <code>content</code> field. From this, is just a matter of reading each chunk as JSON and doing whatever we want with the content from the callback passed to <code>curl_fetch_stream()</code>. We can wrap that functionality in a <code>stream_chatgpt()</code> function to slightly modify the current flow of the app.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-process-stream" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://calderonsamuel.github.io/web/posts/2023-06-02-updating-gptstudio/process-basic-stream.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;4: Flowchart including stream</figcaption>
</figure>
</div>
</div>
</div>
<p>Even though we are able to read the <strong>content</strong> chunk by chunk, we are still waiting for the whole <strong>content</strong> to arrive before rendering something to the browser. That’s that we need to tackle next.</p>
</section>
<section id="render-the-stream-without-reactivity" class="level3">
<h3 class="anchored" data-anchor-id="render-the-stream-without-reactivity">Render the stream without reactivity</h3>
<p>Now that we can receive the response as a stream, we need to talk about reactivity. There is no better explanation about this topic that the one Hadley Wickham provides in <a href="https://mastering-shiny.org/index.html">Mastering Shiny</a>. The chapter about <a href="https://mastering-shiny.org/reactive-graph.html">the reactive graph</a> made me feel like I was unlocking a superpower, and I encourage everyone to give it a try.</p>
<p>In short, it explains how your inputs, reactive expressions and outputs are part of a big and clever reactive process (represented in the reactive graph) that dinamycally updates the data used in your app whenever a change is observed. However, we must have in mind that this process executes <strong>sequentially</strong>, meaning that R needs to complete one task before starting to work in a new one, as it happens in the flow represented by Figure&nbsp;4.</p>
<p>So we need to render the chunks as they arrive while the reactive process is blocked by the unfinished stream. Having the R process blocked means that we can’t rely on reactives or observers to handle changes in the data present in our app or render the content of the streaming chunks.</p>
<p>Luckily, the <code>session</code> object present in every server of a shiny app provides the <code>sendCustomMessage()</code> method to communicate with the browser. This means that we need to use that method inside of the callback provided to <code>curl_fetch_stream()</code> running inside <code>stream_chatgpt()</code>, and send to the browser the accumulated <strong>content</strong> that keeps arriving as individual chunks.</p>
<p>I hope you can understand that tongue-twister better with the following figure:</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-process-stream-wrapper" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://calderonsamuel.github.io/web/posts/2023-06-02-updating-gptstudio/process-stream-wrapper.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;5: Flowchart with communication concurrent to stream</figcaption>
</figure>
</div>
</div>
</div>
<p>As you can see, we do the same thing that we did before, it just happens that now we do it chunk by chunk as they arrive. The copy button is still handled at the very end because there is really no need to do it chunk by chunk.</p>
<p>And with this, you have a better looking chat app, with a copy button, that renders responses in real time.</p>
<!--  -->
<p><img src="https://calderonsamuel.github.io/web/posts/2023-06-02-updating-gptstudio/gptstudio-sample.gif" class="img-fluid"></p>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final thoughts</h2>
<p>All of this began with an open issue in the package’s GitHub repository. If you are developing a project that you think could use some help from the public, going open source and announcing that you need help will drastically improve the chances of, well, getting help. Not only that, an open-source project has better chances of receiving feedback such as bug reports or feature requests.</p>
<p>On the other hand, don’t be afraid of forking an open-source project and trying to make changes to it. At the very least, you can put into practice the knowledge you already have by attempting to fix some of its issues, and in the best-case scenario, you will also learn a lot of new things while challenging yourself to extend the project’s features. While not everything you try will necessarily end up being used for the project, the practice and learning will remain with you for your future projects.</p>
<p>Feel free to give it a try with:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gptstudio"</span>)</span></code></pre></div>
</div>
<p>Any feedback on the <a href="https://github.com/MichelNivard/gptstudio">Github repo</a> will be greatly appreciated.</p>


</section>

 ]]></description>
  <category>rweekly</category>
  <guid>https://calderonsamuel.github.io/web/posts/2023-06-02-updating-gptstudio/index.html</guid>
  <pubDate>Fri, 02 Jun 2023 00:00:00 GMT</pubDate>
  <media:content url="https://calderonsamuel.github.io/web/posts/2023-06-02-updating-gptstudio/chat-example.png" medium="image" type="image/png" height="148" width="144"/>
</item>
<item>
  <title>Monitorear ejecución presupuestal desde R</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2022-08-09-monitorear-ejecuci-n-presupuestal-desde-r/index.html</link>
  <description><![CDATA[ 



<p>Este post marca el lanzamiento oficial de un nuevo paquete para R llamado <code>{perutranspaeconomica}</code>. El paquete cuenta con <a href="https://perutranspaeconomica.samuelenrique.com/">sitio web oficial</a> y <a href="https://github.com/calderonsamuel/perutranspaeconomica">repositorio en Github</a>. Su objetivo es acceder a los datos de ejecución presupuestal de las unidades ejecutoras (entidades públicas) que operan en el país.</p>
<p>El paquete es mejor aprovechable para las personas que estén familiarizadas con el <a href="https://apps5.mineco.gob.pe/transparencia/Navegador/default.aspx">Portal de seguimiento a la ejecución de gasto presupuestal</a> del Ministerio de Economía y Finanzas. Hasta el momento, sirve para hacer consultas a partir del 2012. Con el paso del tiempo (y con algo de apoyo de la comunidad) puede ampliarse para abarcar años anteriores.</p>
<p>Como ejemplo, podemos ver cuánto se presupuesto y gastó en el año 2021 en todo el país. Comenzamos por cargar el paquete y la colección <code>tidyverse</code> para facilidad de tratamiento de los datos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(perutranspaeconomica)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<p>Para hacer la consulta, podemos usar la función <code>gasto()</code>. Con esto obtenemos una tabla muy similar a la de la plataforma del MEF. Para apreciar mejor la información, la convierto en un objeto JSON.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gasto</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-2">    jsonlite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toJSON</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pretty =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Para ver una evolución en el tiempo, podemos usar una consulta iterativa. Así aprovechamos mejor las oportunidades del paquete.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">consulta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2012</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gasto</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> .x))</span>
<span id="cb3-3"></span>
<span id="cb3-4">consulta</span></code></pre></div>
</div>
<p>Por último, podemos graficar los datos obtenidos. En este caso, para conocer la evolución en la ejecución presupuestal del Estado peruano desde el 2012 al 2021.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">consulta <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(year, avance_percent)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_label</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> avance_percent))</span></code></pre></div>
</div>
<p>Como se puede ver, la ejecución presupuestal ha sido superior al 80% en los últimos años, pero nunca alcanzó el 90% de lo presupuestado.</p>
<p>Sin usar el paquete habría sido necesario:</p>
<ol type="1">
<li>Navegar la plataforma año por año</li>
<li>Para cada año, descargar un archivo excel con la información</li>
<li>Juntar todas las tablas en un solo archivo.</li>
<li>Procesar la información y generar el gráfico</li>
</ol>
<p>¡El paquete permitió saltarse los tres primeros pasos! Una consulta más compleja hubiese requerido más tiempo repetido en los pasos 1 y 2. Este es un ejemplo simple para demostrar las posibilidades de usar la información que tenemos a la mano.</p>



 ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2022-08-09-monitorear-ejecuci-n-presupuestal-desde-r/index.html</guid>
  <pubDate>Tue, 09 Aug 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Bug arreglado en Calculadora Renacyt</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2022-07-23-bug-arreglado-en-calculadora-renacyt/index.html</link>
  <description><![CDATA[ 



<p>Este breve post describe un problema que se había encontrado en la Calculadora Renacyt.</p>
<p>En el mes de mayo de este año hice cambios en el repositorio para poder usar <a href="https://shiny.rstudio.com/articles/modules.html">shiny modules</a>, con la esperanza de que así fuera más solucionar cualquier problema en la aplicación.</p>
<p>Lamentablemente, esto introdujo un bug en la aplicación debido a un desafortunado error de tipeo que ocasionaba que la suma del puntaje total ignore el puntaje en formación académica y sume dos veces el puntaje en producción científica. Gracias a los reportes de <a href="https://twitter.com/74Rolo">Rolando Montenegro</a> y Mg. Vitelio Asencios Tarazona pude localizar el problema y corregirlo. ¡Esa es la magia del código abierto!</p>
<p>También quiero aprovechar para anunciar que la app estará siendo alojada en un nuevo servidor que no tiene límites de uso: <a href="https://apps.samuelenrique.com/calculadora-renacyt" class="uri">https://apps.samuelenrique.com/calculadora-renacyt</a> . La sección de proyectos de esta web ahora dirigirá a este enlace.</p>
<p>En el raro caso de que ese enlace falle, se puede seguir usando el anterior: <a href="https://samuelcalderon.shinyapps.io/caluladora-renacyt/" class="uri">https://samuelcalderon.shinyapps.io/caluladora-renacyt/</a></p>
<p>Si alguien encuentra errores o es necesario actualizar la app, la manera más directa de encontrarme pos vía Twitter: <a href="https://twitter.com/samucalse" class="uri">https://twitter.com/samucalse</a></p>



 ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2022-07-23-bug-arreglado-en-calculadora-renacyt/index.html</guid>
  <pubDate>Sat, 23 Jul 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Dos paquetes para mapas peruanos</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2021-10-12-dos-paquetes-para-mapas-peruanos/index.html</link>
  <description><![CDATA[ 



<p>Por cuestiones de trabajo, en los últimos meses tuve necesidad de dibujar mapas y usar las cifras del <a href="https://www.inei.gob.pe/media/MenuRecursivo/publicaciones_digitales/Est/Lib1718/Libro.pdf">Mapa de Pobreza 2018</a> del INEI. En ambos casos, conseguir que la data se encuentre en un formato ordenado que permita trabajar de manera sencilla no fue fácil de lograr.</p>
<p>Para que otras personas no tengan que pasar por ese mismo <em>entretenimiento</em>, desarrollé dos paquetes que contienen la data lista para usar. De paso, creé la sección de <a href="../../project">proyectos</a> en mi web, donde alojaré nuevos paquetes o apps que cree en el futuro. Cada paquete tiene su propia web y repositorio en Github.</p>
<p>Con <code>{perumapas}</code> se puede obtener las geometrías necesarias para dibujar los mapas y con <code>{perupobreza2018}</code> se puede usar las cifras del mapa de pobreza, incluyendo una columna calculada de cifra de pobreza monetaria.</p>
<p>A continuación, un ejemplo para ver cómo trabajan en conjunto.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(perupobreza2018)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(perumapas)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sf) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># obligatorio para perumapas</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># para transformación y gráficos</span></span></code></pre></div>
</div>
<p>Con <code>{perumapas}</code> es sencillo realizar mapas a nivel regional, provincial y distrital. Por ejemplo, el mapa de las regiones del Perú.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mapa_regional <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2021-10-12-dos-paquetes-para-mapas-peruanos/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>El mapa de los distritos de la provincia de Lima:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">mapa_distrital <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(departamento <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LIMA"</span>, provincia <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LIMA"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2021-10-12-dos-paquetes-para-mapas-peruanos/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Con <code>{perupobreza2018}</code> podemos añadirle una capa de información a cualquier mapa distrital. Para ello, primero se hace un join/merge entre los datos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">pobreza_lima <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mapa_distrital <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(departamento <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LIMA"</span>, provincia <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LIMA"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(pobreza2018, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ubigeo"</span>)</span></code></pre></div>
</div>
<p>Con este cruce, podemos colorear cada distrito según su cifra de pobreza monetaria.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">pobreza_lima <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> pobreza_monetaria))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2021-10-12-dos-paquetes-para-mapas-peruanos/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Evidentemente, también es posible usar los paquetes de manera independiente. El nivel de personalización de los mapas generados dependerá del conocimiento en R y el paquete <code>{ggplot2}</code> .</p>



 ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2021-10-12-dos-paquetes-para-mapas-peruanos/index.html</guid>
  <pubDate>Tue, 12 Oct 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Código noob de JS</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2020-04-25-codigo-noob-de-js/index.html</link>
  <description><![CDATA[ 



<p>Este es sólo un recordatorio de un código escrito en JavaScript mientras aprendía, para recordarle a mi yo futuro que ya debería conocer una mejor forma de hacerlo.</p>
<section id="basic-algorithm-scripting-mutations" class="level2">
<h2 class="anchored" data-anchor-id="basic-algorithm-scripting-mutations">Basic Algorithm Scripting: Mutations</h2>
<p>Return true if the string in the first element of the array contains all of the letters of the string in the second element of the array.</p>
<p>For example, [“hello”, “Hello”], should return true because all of the letters in the second string are present in the first, ignoring case.</p>
<p>The arguments [“hello”, “hey”] should return false because the string “hello” does not contain a “y”.</p>
<p>Lastly, [“Alien”, “line”], should return true because all of the letters in “line” are present in “Alien”.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutation</span>(arr) {</span>
<span id="cb1-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// a minusculas las dos palabras</span></span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> arr2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(el <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toLowerCase</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// segunda palabra a array</span></span>
<span id="cb1-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> word2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// indice de aparicion de letra de palabra 2 en palabra 1</span></span>
<span id="cb1-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> word2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(el <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> arr2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>(el))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// test logico para ver si existe un '-1' en indices</span></span>
<span id="cb1-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> bool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> indices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(el <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// se ordena el array bool y se obtiene el primer elemento</span></span>
<span id="cb1-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// si hay 'false' siempre estará delante</span></span>
<span id="cb1-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> bool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">}</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutation</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hey"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//let res2 = [true, false, true, false];</span></span>
<span id="cb1-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(res)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span></span></code></pre></div>


</section>

 ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2020-04-25-codigo-noob-de-js/index.html</guid>
  <pubDate>Sat, 25 Apr 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Propuesta para elegir preguntas en conferencia de prensa</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2020-04-18-propuesta-para-elegir-preguntas-en-conferencia-de-prensa/index.html</link>
  <description><![CDATA[ 



<section id="el-motivo" class="level2">
<h2 class="anchored" data-anchor-id="el-motivo">El motivo</h2>
<p>Casi todos los días vemos las conferencias de prensa que el presidente brinda. En ellas nos da las nuevas cifras importantes acerca del avance del covid19, nuevas medidas del gobierno y respuestas a preguntas de la prensa. Respecto a este último punto, no se conoce de fuentes oficiales la metodología a través de la cuál se realiza la elección de preguntas de la prensa. No me ha parecido que se hayan estado escogiendo preguntas malas, pero me quedé con la duda.</p>
<p>Decidí consultarle a internet. El único medio que reportó algo acerca del tema fue <a href="https://libero.pe/ocio/1553598-coronavirus-peru-preguntas-presidente-martin-vizcarra-covid-19-whatsapp">Líbero</a> (muy para mi sorpresa), y en realidad se trató de un artículo acerca de un hilo en twitter realizado por Eloy Marchán.</p>
<blockquote class="twitter-tweet blockquote" data-lang="es">
<p lang="es" dir="ltr">
(1/4) ¿Cómo salen las preguntas que el presidente <a href="https://twitter.com/MartinVizcarraC?ref_src=twsrc%5Etfw"><span class="citation" data-cites="MartinVizcarraC">@MartinVizcarraC</span></a> responde en las "conferencias de prensa" que da cada día?<br>-Hay un chat de Whatsapp llamado "Actividades Palacio", lo administran los funcionarios Gabriela Carrillo y Juan Francisco Celis y tiene 172 integrantes. <a href="https://t.co/Fc43JZRj3n">pic.twitter.com/Fc43JZRj3n</a>
</p>
— Eloy Marchán (<span class="citation" data-cites="eloymarchan">@eloymarchan</span>) <a href="https://twitter.com/eloymarchan/status/1250922549120315392?ref_src=twsrc%5Etfw">16 de abril de 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>En pocas palabras, según su explicación, existe un grupo de Whatsapp integrado por funcionarios y periodistas de varios medios de comunicación a través del cual se les comunica qué medios podrán enviar sus preguntas, que luego son respondidas en la conferencia de prensa. Los medios son escogidos a través de un sorteo.</p>
<p>El asunto es que, según Marchán, no se sabe en qué consiste ese sorteo. Yo creo que es una duda razonable, e innecesaria de mantener porque podría tener una solución muy simple.</p>
</section>
<section id="la-propuesta" class="level2">
<h2 class="anchored" data-anchor-id="la-propuesta">La propuesta</h2>
<p>Esta propuesta se basa en el supuesto de que es mejor hacer un sorteo de preguntas y no uno de medios de comunicación.</p>
<section id="paso-1-recolectar-las-preguntas" class="level3">
<h3 class="anchored" data-anchor-id="paso-1-recolectar-las-preguntas">Paso 1: Recolectar las preguntas</h3>
<p>Para esto se puede usar un servicio de recolección de formularios/encuestas, como el de Google Forms. Basta con tener dos campos de llenado en el formulario: uno de identificación y uno en el que se brinde el detalle de la pregunta.</p>
<p>El campo de identificación necesitaría que los medios ingresen una contraseña que previamente los funcionarios les hayan brindado. La contraseña es única por medio de comunicación y, para mayor seguridad, puede ser actualizada diariamente.</p>
<p>En el segundo campo de llenado los medios de comunicación ingresan sus preguntas. Se podría poner un límite de caracteres para asegurar que la pregunta no sea más larga que la respuesta que se brindará.</p>
<p>Aquí debajo pongo un formulario de ejemplo en el que sólo se puede llenar el campo de pregunta si se ingresa primero una contraseña adecuada. La contraseña de este formulario consiste de 16 caracteres alfanuméricos aleatorios.</p>
<blockquote class="blockquote">
<p>Contraseña: sEcVwNCLpKqf8oH3</p>
</blockquote>
<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSfL_zYqFoWp7t0spC-fQ86Oe3TNZ8pttDaglfkGK_bvE75eyw/viewform?embedded=true" width="100%" height="333" frameborder="0" marginheight="0" marginwidth="0">
Cargando…
</iframe>
<p>Después de llenar algunas preguntas en el formulario, obtuve la siguiente tabla. Esta tabla se irá actualizando conforme le lleguen nuevas preguntas.</p>
<iframe width="100%" height="350px" src="https://docs.google.com/spreadsheets/d/e/2PACX-1vQkF8DydOAYAGXVHuUi8oLBUZX1nBqKUBb9JUbVAT4EnZ9GVmhYEINYZNQ8pNC1Gax2ZXZCcd01kS7W/pubhtml?gid=1524799486&amp;single=true&amp;widget=true&amp;headers=false">
</iframe>
<p>Para trabajar el ejemplo, tomaré las cuatro (4) observaciones que yo ingresé. Con un cambio en los encabezados y un nuevo formato la tabla se ve así.</p>
<div class="cell">
<div class="cell-output-display">

<div class="tabwid"><style>.cl-02e24bda{}.cl-02db8944{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-02de5638{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-02de67c2{width:2.001in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67cc{width:1.737in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67cd{width:13.543in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67ce{width:2.001in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67d6{width:1.737in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67d7{width:13.543in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67d8{width:2.001in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67d9{width:1.737in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67e0{width:13.543in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67ea{width:2.001in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67eb{width:1.737in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02de67f4{width:13.543in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing="true" class="cl-02e24bda"><caption><p>Ejemplo</p></caption><thead><tr style="overflow-wrap:break-word;"><th class="cl-02de67c2"><p class="cl-02de5638"><span class="cl-02db8944">Hora</span></p></th><th class="cl-02de67cc"><p class="cl-02de5638"><span class="cl-02db8944">Contraseña</span></p></th><th class="cl-02de67cd"><p class="cl-02de5638"><span class="cl-02db8944">Pregunta</span></p></th></tr></thead><tbody><tr style="overflow-wrap:break-word;"><td class="cl-02de67ce"><p class="cl-02de5638"><span class="cl-02db8944">2020-04-17 22:34:32.967</span></p></td><td class="cl-02de67d6"><p class="cl-02de5638"><span class="cl-02db8944">sEcVwNCLpKqf8oH3</span></p></td><td class="cl-02de67d7"><p class="cl-02de5638"><span class="cl-02db8944">En vista de las observaciones emitidas por los especialistas Fulano, Mengana y Sotana acerca de la medida X, ¿cuál será la nueva estrategia del gobierno?</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-02de67d8"><p class="cl-02de5638"><span class="cl-02db8944">2020-04-17 22:38:38.994</span></p></td><td class="cl-02de67d9"><p class="cl-02de5638"><span class="cl-02db8944">sEcVwNCLpKqf8oH3</span></p></td><td class="cl-02de67e0"><p class="cl-02de5638"><span class="cl-02db8944">Las periodistas Fulana y Mengana denunciaron los hechos 1 y 2 ocurridos en las regiones X y Z. ¿Qué medidas está tomando el ministerio A para prevenir que vuelvan a ocurrir?</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-02de67ce"><p class="cl-02de5638"><span class="cl-02db8944">2020-04-17 22:40:27.624</span></p></td><td class="cl-02de67d6"><p class="cl-02de5638"><span class="cl-02db8944">sEcVwNCLpKqf8oH3</span></p></td><td class="cl-02de67d7"><p class="cl-02de5638"><span class="cl-02db8944">Los médicos de la provincia A de la región X denunciaron la falta de material en el hospital regional. ¿Desde cuándo se tenía conocimiento de este hecho y por qué no se logró enfrentar a tiempo?</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-02de67ea"><p class="cl-02de5638"><span class="cl-02db8944">2020-04-17 22:42:12.543</span></p></td><td class="cl-02de67eb"><p class="cl-02de5638"><span class="cl-02db8944">sEcVwNCLpKqf8oH3</span></p></td><td class="cl-02de67f4"><p class="cl-02de5638"><span class="cl-02db8944">El funcionario Fulano ha declarado X en el medio A. ¿Es esta la postura oficial del gobierno?</span></p></td></tr></tbody></table></div>
</div>
</div>
<p>La columna <strong>Hora</strong> se genera de manera automática en Google Forms e indica la hora y fecha en que fue ingresada la pregunta. Cuando cada medio tenga su contraseña, la columna <strong>Contraseña</strong> tendría contraseñas diferentes en cada fila.</p>
</section>
<section id="paso-2-sortear-las-preguntas" class="level3">
<h3 class="anchored" data-anchor-id="paso-2-sortear-las-preguntas">Paso 2: Sortear las preguntas</h3>
<p>Una vez obtenida la tabla de preguntas se debe realizar el sorteo y aquí viene el aporte principal de este artículo: el sorteo debe ser aleatorio y reproducible. Esto se puede lograr usando un valor <em>semilla</em> al momento de realizar el muestreo. En el siguiente bloque de código de R uso como valor semilla la fecha de hoy para obtener una muestra de dos observaciones de mi tabla de <code>preguntas</code><sup>1</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18042020</span>)</span>
<span id="cb1-2">muestra <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_n</span>(preguntas, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(muestra)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">

<div class="tabwid"><style>.cl-03027216{}.cl-02fccbc2{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-02ff140e{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-02ff205c{width:2.001in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02ff2066{width:1.737in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02ff2067{width:12.353in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02ff2068{width:2.001in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02ff2070{width:1.737in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02ff2071{width:12.353in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02ff2072{width:2.001in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02ff2073{width:1.737in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-02ff207a{width:12.353in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing="true" class="cl-03027216"><caption><p>Preguntas</p></caption><thead><tr style="overflow-wrap:break-word;"><th class="cl-02ff205c"><p class="cl-02ff140e"><span class="cl-02fccbc2">Hora</span></p></th><th class="cl-02ff2066"><p class="cl-02ff140e"><span class="cl-02fccbc2">Contraseña</span></p></th><th class="cl-02ff2067"><p class="cl-02ff140e"><span class="cl-02fccbc2">Pregunta</span></p></th></tr></thead><tbody><tr style="overflow-wrap:break-word;"><td class="cl-02ff2068"><p class="cl-02ff140e"><span class="cl-02fccbc2">2020-04-17 22:42:12.543</span></p></td><td class="cl-02ff2070"><p class="cl-02ff140e"><span class="cl-02fccbc2">sEcVwNCLpKqf8oH3</span></p></td><td class="cl-02ff2071"><p class="cl-02ff140e"><span class="cl-02fccbc2">El funcionario Fulano ha declarado X en el medio A. ¿Es esta la postura oficial del gobierno?</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-02ff2072"><p class="cl-02ff140e"><span class="cl-02fccbc2">2020-04-17 22:38:38.994</span></p></td><td class="cl-02ff2073"><p class="cl-02ff140e"><span class="cl-02fccbc2">sEcVwNCLpKqf8oH3</span></p></td><td class="cl-02ff207a"><p class="cl-02ff140e"><span class="cl-02fccbc2">Las periodistas Fulana y Mengana denunciaron los hechos 1 y 2 ocurridos en las regiones X y Z. ¿Qué medidas está tomando el ministerio A para prevenir que vuelvan a ocurrir?</span></p></td></tr></tbody></table></div>
</div>
</div>
<p>Ahora, cualquier persona que tenga acceso a la tabla de preguntas puede reproducir el resultado de mi “elección” aleatoria usando el valor <em>semilla</em>.</p>
</section>
<section id="paso-3-comunicar-los-resultados" class="level3">
<h3 class="anchored" data-anchor-id="paso-3-comunicar-los-resultados">Paso 3: Comunicar los resultados</h3>
<p>Además de contestar las preguntas que fueron escogidas, es necesario que se hagan públicos la tabla de preguntas y el valor semilla utilizado para el muestreo (compartir el código utilizado sería incluso más útil). Esto puede servir de oportunidad para compartirse de manera conjunta con un resumen indicando las preguntas escogidas y sus respectivas respuestas.</p>
<p>La “elección” de preguntas tendría que hacerse con el tiempo prudente para preparar respuestas satisfactorias y descartar preguntas repetidas o inútiles (riesgos latentes). En este artículo no se propone que se haga esta elección en medio de la conferencia de prensa.</p>
</section>
<section id="paso-4-repetir" class="level3">
<h3 class="anchored" data-anchor-id="paso-4-repetir">Paso 4: Repetir</h3>
<p>Para la siguiente conferencia de prensa basta con limpiar los registros anteriores o filtrarlos de acuerdo a la nueva fecha. En caso se de decida, podrían actualizarse las contraseñas de los medios.</p>
</section>
<section id="extra-tiempo-usado" class="level3">
<h3 class="anchored" data-anchor-id="extra-tiempo-usado">Extra: Tiempo usado</h3>
<p>Para crear el formulario en Google Forms demoré menos de diez minutos. El proceso de muestreo de la tabla con valor semilla fue practicamente instantáneo.</p>
<p>En el siguiente bloque uso código R para demostrar que se tarda mucho menos de un segundo crear una gran cantidad de contraseñas para medios de comunicación.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creando conjunto de caracteres alfanumericos con</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minúsculas, mayúsculas y números</span></span>
<span id="cb2-3">alfanumericos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(letters, LETTERS, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creando función para replicar </span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creación de contraseña</span></span>
<span id="cb2-7">crear_contraseñas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(conjunto, numero) {</span>
<span id="cb2-8">  </span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(numero, </span>
<span id="cb2-10">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> conjunto, </span>
<span id="cb2-11">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, </span>
<span id="cb2-12">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb2-13">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-14">            )</span>
<span id="cb2-15">}</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cantidad de milisegundos requeridos </span></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># para crear n contraseñas</span></span>
<span id="cb2-19">microbenchmark<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb2-20">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">300</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {crear_contraseñas(alfanumericos, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)},</span>
<span id="cb2-21">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">500</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {crear_contraseñas(alfanumericos, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)},</span>
<span id="cb2-22">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">1000</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {crear_contraseñas(alfanumericos, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)}</span>
<span id="cb2-23">    )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: milliseconds
 expr      min       lq     mean   median       uq       max neval
  300 1.801001 1.884000 2.236111 1.967452 2.091251  8.926201   100
  500 2.974700 3.202051 3.630210 3.381851 3.685250  9.327401   100
 1000 6.008501 6.324001 7.794788 6.736301 7.614100 22.179302   100</code></pre>
</div>
</div>
<p>Viendo el cruce de la fila “1000” con la columna “mean”, vemos que en promedio requiere poquísimos milisegundos crear 1000 contraseñas diferentes. Usando 16 caracteres alfanuméricos, es posible obtener hasta <img src="https://latex.codecogs.com/png.latex?62%5E%7B16%7D"> contraseñas únicas (equivalente a <img src="https://latex.codecogs.com/png.latex?4.76*10%5E%7B28%7D">).</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Utilizo en un bloque oculto <code>flextable::flextable()</code> para imprimir la tabla con el formato adecuado.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2020-04-18-propuesta-para-elegir-preguntas-en-conferencia-de-prensa/index.html</guid>
  <pubDate>Sat, 18 Apr 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>¿Por qué debo dejar que usen mi trabajo?</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2020-03-10-por-que-debo-dejar-que-usen-mi-trabajo/index.html</link>
  <description><![CDATA[ 



<p>El día de hoy ingresé, como ya se me está haciendo costumbre, a <a href="https://es.stackoverflow.com/">StackOverflow</a> a ver si podía hacer algo para aumentar mis puntos de reputación. Como suele ocurrir en internet, uno empieza viendo una cosa y termina en un sitio bien diferente.</p>
<p>Llegué a <a href="https://academia.stackexchange.com/">StackExchange Academia</a> y vi una <a href="https://academia.stackexchange.com/questions/145212/advisor-professor-asking-me-for-the-source-code-of-my-dissertation-in-order-to-b">pregunta</a>, que me pareció muy interesante. Una persona cuenta que trabajó mucho para realizar un trabajo de investigación para su tesis de postgrado, y que ahora su asesor le está pidiendo el código utilizado en su trabajo para que otra persona lo utilice. Me pareció interesante además que una de las etiquetas con las que esta persona marcó su pregunta fuera la de <em>Propiedad intelectual</em>.</p>
<section id="ser-autor-de-mi-trabajo-está-bien" class="level2">
<h2 class="anchored" data-anchor-id="ser-autor-de-mi-trabajo-está-bien">Ser autor de mi trabajo está bien</h2>
<p>No cuesta mucho entender por qué. Si me pasé meses (o años) de duro trabajo para encontrar o construir los datos o procedimientos de análisis que me permitieron validar o refutar una hipótesis mía o de la comunidad científica, si le dediqué tanto tiempo, esfuerzo y rigurosidad a que mi trabajo sea de una calidad que me permita obtener una gran nota en mi presentación, si tuve que gastar mis escasos recursos y tiempo para obtener mi trabajo, es lógico que todo lo que se derive de ello sea <strong>mío</strong>. Yo no creo que pensar de esta manera sea egoísta.</p>
<p>La mayoría de instituciones que le dedican recursos a la investigación terminan publicando los resultados en algún tipo de reporte, libro, mapa, dashboard, medio de comunicación, redes sociales, etc. Nos llegamos a enterar de los resultados de las investigaciones a través de resúmenes ejecutivos o abstracts. Pero, ¿qué pasa si queremos verificar que la investigación siguió cierto estándar de calidad? Esto en general se refiere a los datos utilizados, desde su recolección hasta la metodología de análisis empleada. También me interesa averiguar si la persona que investigó obtuvo las conclusiones adecuadas respecto a los resultados de sus tests. Mientras más cercanas a la academia, las instituciones van aumentando su nivel de rigurosidad, y son mandatorios los marcos teóricos, capítulos de metodología, resultados y conclusiones. En el caso de las entidades públicas (y en general), se va haciendo cada vez más común que los conjuntos de datos utilizados en los análisis sean compartidos de manera pública. En el Perú, el <a href="www.inei.gob.pe">INEI</a> realiza esto a través de su portal de Microdatos y el Poder Ejecutivo muestra avances con su portal de <a href="https://www.datosabiertos.gob.pe/">Datos Abiertos</a>.</p>
<p>Sin embargo, quiero atreverme a decir que esto no es suficiente. Cuando una persona se involucra en el análisis de datos, está realizando investigación, lo que significa que se encuentra una pregunta que quiere responder, se plantea una hipótesis al respecto y decide un método a través del cuál validará o rechazará su hipótesis. No hay investigación sin pregunta de investigación, ni hipótesis, ni metodología. Eso lo conocemos desde que asistimos a la primaria, porque es el método científico. En lo que nos quedamos cortos es en la <em>reproducibilidad</em> y la <em>replicabilidad</em>.</p>
</section>
<section id="replicable-o-reproducible" class="level2">
<h2 class="anchored" data-anchor-id="replicable-o-reproducible">¿Replicable o reproducible?</h2>
<p>Según el diccionario de Oxford, lo reproducible es algo que:</p>
<blockquote class="blockquote">
<p>Puede ser producido o hecho nuevamente de la misma manera<sup>1</sup></p>
</blockquote>
<p>En el caso de una investigación, nos referimos a que <em>con el mismo conjunto de datos</em> del análisis, realizando el mismo procedimiento, podemos obtener el mismo resultado. Esto hace que la calidad de la investigación tenga mayor facilidad de ser verificado por pares. Esta es una práctica bastante común en entornos que usan investigación estadística o a través de código.</p>
<p>Por otro lado, lo replicable es algo que:</p>
<blockquote class="blockquote">
<p>Puede ser copiado exactamente<sup>2</sup></p>
</blockquote>
<p>Roger D. Peng nos da un ejemplo de lo que esto significa en un contexto científico:</p>
<blockquote class="blockquote">
<p>Si dices que X causa Y, o que la Vitamina C agudiza una enfermedad, o que algo causa un problema, sucede que otros científicos, independientes de ti, tratarán de investigar la misma pregunta y ver si obtienen un resultado similar. Si muchas otras personas obtienen el mismo resultado y replican el hallazgo original, entonces tendemos a pensar que el hallazgo original probablemente fue verdadero, y que se trata de una relación o hallazgo real.<sup>3</sup></p>
</blockquote>
<p>En otras palabras, un estudio es replicado cuando al usar el mismo método de análisis <em>en un nuevo conjunto de datos</em> generados por el mismo diseño experimental, los resultados son similares.</p>
<p>La replicabilidad en sí no tiene nada de malo, es uno de los pilares del método científico y, en teoría, es aspirable. Sin embargo, es costosa. Recordemos que los resultados de los <a href="http://censo2017.inei.gob.pe/">Censos 2017</a> en Perú fueron cuestionados desde el mismo día de la recolección de datos, por la gran cantidad de personas que reportaron no haber sido visitados por el personal de INEI. Pero, ¿quién podría replicar un censo?. Fuera de los límites legales, ¿qué persona o institución privada querría disponer <a href="https://elcomercio.pe/peru/censo-2017-invertira-proceso-noticia-463178-noticia/">173.8 millones de soles</a> en verificar que los resultados obtenidos sean los mismos que los del INEI?</p>
<p>Evidentemente, un censo es un caso extremo. Pero podríamos cuestionar también la replicabilidad de encuestas de hogares, estudios económicos, tests de tratamientos experimentales, y un largo etcétera que incluye las encuestas de opinión que tanto aparecen en los medios de comunicación. A medida que aumenta nuestra necesidad (y capacidad) de obtener información, la replicabilidad se vuelve cada vez más difícil.</p>
<p>Es por ello que la reproducibilidad se convierte en una alternativa viable. Esto no quiere decir que la replicabilidad deje de ser deseada. Si volvemos al caso de la pregunta que encontré en Stack Exchange, esta persona fue cuestionada por su asesor acerca de que otra persona pueda usar su <em>código</em> para su trabajo de investigación, en otras palabras, esta nueva persona estaba buscando <em>replicar</em> el trabajo, cosa que debería ser aceptada y promovida, porque es la mejor manera de hacer que la ciencia avance.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Traducción propia de https://www.oxfordlearnersdictionaries.com/us/definition/english/reproducible?q=reproducible↩︎</p></li>
<li id="fn2"><p>Traducción propia de https://www.oxfordlearnersdictionaries.com/definition/english/replicable?q=replicable↩︎</p></li>
<li id="fn3"><p>Traducción propia de Peng, R. (2019) <em>Report writing for Data Science in R</em>. pg. 1. LeanPub.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2020-03-10-por-que-debo-dejar-que-usen-mi-trabajo/index.html</guid>
  <pubDate>Tue, 10 Mar 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>¿Cómo hacer un gráfico de parlamento en R?</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2021-08-15-grafico-de-parlamento/index.html</link>
  <description><![CDATA[ 



<p>Para esta tarea vamos a hacer de uso dos paquetes principalmente: el viejo conocido <code>tidyverse</code> y también de <code>ggpol</code>, una extensión de ggplot2 desarrollada especialmente para este tipo de gráficos. <code>ggforce</code> nos servirá al final sólo para una mejora estética.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggpol)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggforce)</span></code></pre></div>
</div>
<p>Como en todo gráfico que se realiza con ggplot2, necesitamos primero contar con un <em>data.frame</em> o <em>tibble</em> que contenga la información necesaria para construirlo. La fuente primaria de estos datos es la web de la <a href="https://resultados.eleccionescongresales2020.pe/PRECE2020/">ONPE</a>, de donde se puede obtener el detalle de la votación por varios niveles de desagregación. Debido a que no es propósito de este post mostrar cómo hacer el <em>scrapping</em> de la información, ni el cálculo de las curules, voy a preferir un resumen que ya ha trabajado otra persona para graficar en base a ello.</p>
<p>En la web de <a href="http://www.joseincio.com/post/resultados-congreso-extraordinario-2020/">José Incio</a> podemos encontrar un cuadro de la distribución de escaños del nuevo congreso peruano. Debido a que esa información aún está actualizándose según el conteo de los votos que ONPE sigue realizando, quiero hacer uso de <code>Sys.time()</code> para mostrar la hora en que estoy escribiendo este post.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2023-05-19 11:41:38 -05"</code></pre>
</div>
</div>
<p>Haciendo uso del add-in <em>Paste as tribble</em> que el paquete <code>datapasta</code> incluye en RStudio, puedo obtenr el <em>tibble</em> <code>congreso</code>, que no es más que un copy/paste de la tabla elaborada por José Incio disponible a esta hora.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">votos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb4-2">                                          <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Partido, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Escaños,</span>
<span id="cb4-3">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ACCION POPULAR"</span>,      25L,</span>
<span id="cb4-4">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALIANZA PARA EL PROGRESO"</span>,      22L,</span>
<span id="cb4-5">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FRENTE POPULAR AGRICOLA FIA DEL PERU - FREPAP"</span>,      15L,</span>
<span id="cb4-6">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FUERZA POPULAR"</span>,      15L,</span>
<span id="cb4-7">                               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UNION POR EL PERU"</span>,      13L,</span>
<span id="cb4-8">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PARTIDO DEMOCRATICO SOMOS PERU"</span>,      11L,</span>
<span id="cb4-9">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PODEMOS PERU"</span>,      11L,</span>
<span id="cb4-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EL FRENTE AMPLIO POR JUSTICIA, VIDA Y LIBERTAD"</span>,       9L,</span>
<span id="cb4-11">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PARTIDO MORADO"</span>,       9L</span>
<span id="cb4-12">  )</span></code></pre></div>
</div>
<p>El siguiente paso es mejorar el <em>tibble</em> de tal modo que nos permita realizar el gráfico deseado. Empezamos por agregarle un color a cada uno de los partidos presentes en el gráfico. Podemos guiarnos de una <a href="http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf">hoja de referencia</a> para escoger los colores, tomando en cuenta los colores partidarios. Podemos unir los colores a los partidos haciendo uso de <code>bind_cols()</code></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">congreso <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colores =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb5-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkred"</span>,</span>
<span id="cb5-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dodgerblue4"</span>,</span>
<span id="cb5-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deepskyblue3"</span>,</span>
<span id="cb5-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkorange2"</span>,</span>
<span id="cb5-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gold2"</span>,</span>
<span id="cb5-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brown3"</span>,</span>
<span id="cb5-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"royalblue3"</span>,</span>
<span id="cb5-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forestgreen"</span>,</span>
<span id="cb5-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mediumpurple4"</span></span>
<span id="cb5-12">)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(votos)</span></code></pre></div>
</div>
<p>Ahora que contamos con los datos, simplemente realizamos el gráfico. Hacemos uso de <code>geom_parliament()</code> del paquete <code>ggpol</code>. Tan sólo necesitamos mapear dos argumentos:</p>
<ol type="1">
<li><code>seats</code>: la cantidad de escaños o <em>asientos</em> obtenidos</li>
<li><code>fill</code>: el nombre de los partidos</li>
</ol>
<p>Además de eso, usaremos <code>scale_fill_manual()</code> para utilizar nuestros colores personalizados y el nombre de los partidos en la leyenda del gráfico. Luego, <code>coord_fixed()</code> nos ayuda a preservar el ratio de aspecto del gráfico.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">grafico <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(congreso)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_parliament</span>(</span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb6-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seats =</span> Escaños, </span>
<span id="cb6-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> Partido), </span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_manual</span>(</span>
<span id="cb6-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> congreso<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>colores, </span>
<span id="cb6-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> congreso<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Partido) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>()</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(grafico)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://calderonsamuel.github.io/web/posts/2021-08-15-grafico-de-parlamento/index_files/figure-html/grafico-1.png" class="img-fluid figure-img" width="480"></p>
</figure>
</div>
</div>
</div>
<p>Vemos que hemos obtenido el gráfico y los partidos aparecen pintados con los colores que hemos asignado. Sin embargo, aún es posible hacerle unas mejoras estéticas. Usamos <code>theme_no_axes()</code> del paquete <code>ggforce</code> para eliminar las líneas guía de nuestro plano cartesiano y quedarnos sólo con un marco negro. También usamos <code>labs()</code> para agregarle un título a nuestro gráfico y <code>theme()</code> para cambiar el tamaño de los elementos de nuestra leyenda.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">grafico <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_no_axes</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DISTRIBUCIÓN DE ESCAÑOS"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(</span>
<span id="cb8-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb8-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.key.size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(</span>
<span id="cb8-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb8-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://calderonsamuel.github.io/web/posts/2021-08-15-grafico-de-parlamento/index_files/figure-html/final-1.png" class="img-fluid figure-img" width="480"></p>
</figure>
</div>
</div>
</div>
<p>Ya tenemos un gráfico más presentable y sencillo de replicar.</p>



 ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2021-08-15-grafico-de-parlamento/index.html</guid>
  <pubDate>Wed, 29 Jan 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Cédula Elecciones 2020 usando ggplot2 (parte 3)</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2021-01-24-cedula-2020-ggplot2-parte-3/index.html</link>
  <description><![CDATA[ 



<p>En el <a href="../../blog/cedula-2020-ggplot2-parte-2/">post anterior</a> logramos agregarle texto al esqueleto de nuestra cédula. Ahora debemos aprender a agregarle imágenes. Iniciamos, como siempre, haciendo uso de nuestros paquetes predilectos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<section id="lo-básico" class="level3">
<h3 class="anchored" data-anchor-id="lo-básico">Lo básico</h3>
<p>Para poder entender cómo se logra insertar los logos de los partidos políticos hace falta primero entender cómo insertar imágenes a un gráfico de ggplot2. Hasta la fecha, la forma más conveniente que he encontrado es haciendo uso de <code>annotation_custom()</code>. Esta función toma como primer argumento un <code>grob</code>, un objeto que sirve como bloque básico de construcción de todos los gráficos de ggplot2. Para lo que buscamos hacer, colocar los logos de los partidos dentro del gráfico, necesitamos convertir nuestras imágenes en <code>grob</code>s.</p>
<p>Para que R interprete nuestras imágenes, hacemos uso de la función <code>load.image()</code> del paquete <code>imager</code>. Con el objeto obtenido hacemos uso de la función <code>rasterGrob()</code> del paquete <code>grid</code>, para obtener el <code>grob</code> necesario. Finalmente, <code>annotation_custom()</code> nos permite colocar el <code>grob</code> usando una sintaxis muy similar a la que hemos usado anteriormente con <code>geom_rect()</code>. Con el siguiente ejemplo, que usa el logo de esta página, debería quedar más claro.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_b98d297ec927679c8b285a3a9d57b541">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">url_ejemplo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Orange_tabby_cat_sitting_on_fallen_leaves-Hisashi-01A.jpg/800px-Orange_tabby_cat_sitting_on_fallen_leaves-Hisashi-01A.jpg"</span></span>
<span id="cb2-2">imagen_ejemplo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> imager<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load.image</span>(url_ejemplo)</span>
<span id="cb2-3">grob_ejemplo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rasterGrob</span>(imagen_ejemplo)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotation_custom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grob =</span> grob_ejemplo,</span>
<span id="cb2-9">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb2-10">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2021-01-24-cedula-2020-ggplot2-parte-3/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="288"></p>
</div>
</div>
</section>
<section id="lo-real" class="level3">
<h3 class="anchored" data-anchor-id="lo-real">Lo real</h3>
<p>Ahora que hemos entendido cómo funciona el procedimiento de agregar las imágenes, estamos listos para agregar los logos a nuestra cédula. Podríamos repetir el procedimiento anterior por cada partido en contienda, sin embargo, aprovechemos las ventajas de usar R para hacerlo más rápido (no necesariamente más sencillo).</p>
<p>Lo primero será tener los enlaces a todos los logos de los partidos. Esto es posible debido a que el portal <a href="https://votoinformado.jne.gob.pe/voto">Voto Informado</a> cuenta con todos ellos. El vector <code>logo_url</code> fue creado manualmente para contener todos los logos, a excepción del de <strong>Todos por el Perú</strong> debido a que fue eliminado de la contienda por el JNE. En nuestro vector aparece como un <code>NA</code>.</p>
<div class="cell" data-hash="index_cache/html/logos_75dc7259f3ee6d7b35b80d96dfe3517e">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">logo_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2160.JPG"</span>,</span>
<span id="cb3-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/1366.JPG"</span>,</span>
<span id="cb3-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/1264.JPG"</span>,</span>
<span id="cb3-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/55.JPG"</span>,</span>
<span id="cb3-6">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb3-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/1257.JPG"</span>,</span>
<span id="cb3-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2840.JPG"</span>,</span>
<span id="cb3-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/4.JPG"</span>,</span>
<span id="cb3-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2173.JPG"</span>,</span>
<span id="cb3-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/5.JPG"</span>,</span>
<span id="cb3-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2731.JPG"</span>,</span>
<span id="cb3-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/47.JPG"</span>,</span>
<span id="cb3-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/14.JPG"</span>,</span>
<span id="cb3-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2191.JPG"</span>,</span>
<span id="cb3-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/32.JPG"</span>,</span>
<span id="cb3-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2649.JPG"</span>,</span>
<span id="cb3-18">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2646.JPG"</span>,</span>
<span id="cb3-19">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2235.JPG"</span>,</span>
<span id="cb3-20">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2218.JPG"</span>,</span>
<span id="cb3-21">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2190.JPG"</span>,</span>
<span id="cb3-22">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/22.JPG"</span>,</span>
<span id="cb3-23">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/15.JPG"</span></span>
<span id="cb3-24">)</span></code></pre></div>
</div>
<p>Ahora que contamos con los enlaces, creamos una función que nos permita repetir el proceso de crear los <code>grob</code>s, de tal modo que podamos usarla sistemáticamente. La función que estamos creando, <code>grob_url()</code>, devuelve los valores <code>NA</code>. El argumento <code>interpolate = TRUE</code> dentro de <code>grid::rasterGrob()</code> ayuda a mejorar la calidad de la imagen.</p>
<div class="cell" data-hash="index_cache/html/grob_url_caaa6ada68786a5c6cbec55caf2e2854">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">grob_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(fileurl){</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(fileurl)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb4-3">  img <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> imager<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load.image</span>(fileurl)</span>
<span id="cb4-4">  grob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rasterGrob</span>(</span>
<span id="cb4-5">    img, </span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">interpolate=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-7">  </span>
<span id="cb4-8">  grob</span>
<span id="cb4-9">}</span></code></pre></div>
</div>
<p>Ahora que contamos con una función que cumple nuestros objetivos, la aplicamos a todos los enlaces contenidos en <code>logo_url</code>. Para ello hacemos uso de la función <code>map()</code> del paquete <code>purrr</code>. Debido a que <code>map()</code> siempre nos devuelve una lista, usamos la función <code>tibble()</code> para crear un objeto <em>tibble</em> con una sola columna (grob), que contiene cada uno de nuestros <code>grob</code>s. Es el mismo nombre que el primer argumento de <code>annotation_custom()</code>, y tiene un motivo que descubriremos más adelante. El objeto <code>grob</code> ahora es una tabla que contiene listas en su única columna, pero nos permite trabajar con ella como si fuera cualquier <em>data.frame</em> normal.</p>
<div class="cell" data-hash="index_cache/html/grob_9230994d9fc61ca2f7cf0b6008dc0520">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">grob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(logo_url, grob_url) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grob =</span> .)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(grob)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 1
  grob      
  &lt;list&gt;    
1 &lt;rastrgrb&gt;
2 &lt;rastrgrb&gt;
3 &lt;rastrgrb&gt;
4 &lt;rastrgrb&gt;
5 &lt;lgl [1]&gt; 
6 &lt;rastrgrb&gt;</code></pre>
</div>
</div>
<p>Ahora podemos hacer uso de <code>annotation_custom()</code> en cada uno de nuestros <code>grob</code>s. Recordemos los argumentos que esta función necesita:</p>
<ol type="1">
<li><code>grob</code>: Es el <em>grob</em> que será dibujado en el gráfico.</li>
<li><code>xmin</code>: El primer valor del eje X, o posición de la esquina izquierda de la imagen.</li>
<li><code>xmax</code>: El segundo valor del eje X, o posición de la esquina derecha de la imagen.</li>
<li><code>ymin</code>: El primer valor del eje Y, o posición de la esquina inferior de la imagen.</li>
<li><code>ymax</code>: El segundo valor del eje Y, o posición de la esquina superior de la imagen.</li>
</ol>
<p>Ya tenemos nuestros <em>grobs</em> mapeados en el tibble <code>grob</code>, ahora necesitamos los otros cuatro argumentos. Sin embargo, estos ya los teníamos desde hace muchísimo antes. Están contenidos en el tibble <code>preferencial</code> que creamos en la <a href="../../blog/cedula-2020-ggplot2-parte-2/">primera parte</a> cuando usamos <code>geom_rect()</code> para dibujar los cuadros para voto preferencial.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-2_615749b95adf95b950e44da489b51407">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(preferencial)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 4
   xmin  xmax  ymin  ymax
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  10.8  11.8  27.3  28.3
2  10.8  11.8  26.1  27.1
3  10.8  11.8  24.9  25.9
4  10.8  11.8  23.7  24.7
5  10.8  11.8  22.5  23.5
6  10.8  11.8  21.3  22.3</code></pre>
</div>
</div>
<p>Entonces, lo que necesitamos hacer ahora es unir ambos tibbles con <code>bind_cols()</code> del paquete <code>dplyr()</code>. Luego usamos <code>filter()</code> para librarnos del valor <code>NA</code> porque ya no es útil (de hecho, si lo dejamos ocasionaremos un bug que me costó más tiempo del debido identificar). Finalmente, utilizamos <code>pmap()</code> del paquete <code>purrr</code> para usar cada fila de nuestri tibble como lista de argumentos de <code>annotation_custom()</code>. Con esto, hemos conseguido la lista <code>annotations</code> con la que podemos graficar todos los logos.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-3_0d127a189700cdf80683704df41f527a">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">annotations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grob <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(preferencial) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(grob)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(annotation_custom)</span></code></pre></div>
</div>
<p>Sin embargo, unir todos los <em>annotations</em> no es tan sencillo como hacer <code>cedula + annotations</code> debido a que <code>annotation_custom()</code> no se comporta como un <code>geom_*</code>. Será necesario crear una función que nos permita hacer una suma recursiva de todos los elementos: <code>rec_ggadd()</code> toma un objeto de <code>ggplot2</code> y una lista para añadir recursivamente sus elementos al objeto. El tercer argumento es un iterador que permite la recursividad, y no necesita ser identificado por quien use la función.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-4_9ce4a45e0bcc3c66943483f7799a1349">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">rec_ggadd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(ggobj, lista, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(lista)){</span>
<span id="cb10-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>){</span>
<span id="cb10-3">    ggobj <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lista[[i]]</span>
<span id="cb10-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb10-5">    ggobj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggobj <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lista[[i]]</span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rec_ggadd</span>(ggobj, lista, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)</span>
<span id="cb10-7">  }</span>
<span id="cb10-8">}</span></code></pre></div>
</div>
<p>Ahora sí, sólo queda aplicar la función a nuestra <code>cedula</code> y habremos conseguido lo que tanto deseábamos.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-5_cb092057206bba5857ce522d096b382e">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">cedula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rec_ggadd</span>(cedula, annotations)</span></code></pre></div>
</div>
<p>Imprimimos <code>cedula</code> para ver que todo salió bien.</p>
<div class="cell" data-hash="index_cache/html/print_bd3bd24e73a6f2a08200c7e8317aa6c4">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">cedula</span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-6_62a99048d1c68be5099d1dfee8e1b23b">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cedula-parte-3.png"</span>, cedula)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Saving 3 x 6.4 in image</code></pre>
</div>
</div>
<p><img src="https://calderonsamuel.github.io/web/posts/2021-01-24-cedula-2020-ggplot2-parte-3/cedula-parte-3.png" width="288" height="615"></p>


</section>

 ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2021-01-24-cedula-2020-ggplot2-parte-3/index.html</guid>
  <pubDate>Fri, 24 Jan 2020 00:00:00 GMT</pubDate>
  <media:content url="https://calderonsamuel.github.io/web/posts/2021-01-24-cedula-2020-ggplot2-parte-3/cedula-parte-3.png" medium="image" type="image/png" height="307" width="144"/>
</item>
<item>
  <title>Cédula Elecciones 2020 usando ggplot2 (parte 2)</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2020-01-18-cedula-2020-ggplot2-parte-2/index.html</link>
  <description><![CDATA[ 



<p>En el <a href="../../post/2020-01-15-cedula-2020-ggplot2-parte-1">post anterior</a> mostramos cómo crear el “esqueleto” de la cédula. En este, en cambio, incluiremos el texto y los logos de los partidos. Primero lo primero, habilitamos los paquetes del tidyverse.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<p>Nos aseguramos de contar con los objetos creados en el paso anterior. Especialmente el objeto <code>cedula</code>, que contiene las instrucciones de nuestro “esqueleto”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "cedula"          "has_annotations" "instrucciones"   "preferencial"   
[5] "rectangulos"    </code></pre>
</div>
</div>
<p>Comenzaremos por crear un vector que contenga los nombres de los partidos políticos en contienda, basados en el orden que obtuvieron en el <a href="https://www.onpe.gob.pe/sala-prensa/notas-prensa/elecciones-congresales-2020-onpe-sorteo-ubicacion-de-organizaciones-politicas-en-cedulas-sufragio/">sorteo</a> realizado por la ONPE para determinar la posición en la cédula. Lo llamamos <code>partidos</code>. .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">partidos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb4-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EL FRENTE AMPLIO POR JUSTICIA, VIDA Y LIBERTAD"</span>,</span>
<span id="cb4-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FUERZA POPULAR"</span>,</span>
<span id="cb4-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JUNTOS POR EL PERU"</span>,</span>
<span id="cb4-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PERU PATRIA SEGURA"</span>,</span>
<span id="cb4-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TODOS POR EL PERU"</span>,</span>
<span id="cb4-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALIANZA PARA EL PROGRESO"</span>,</span>
<span id="cb4-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PARTIDO MORADO"</span>,</span>
<span id="cb4-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ACCION POPULAR"</span>,</span>
<span id="cb4-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AVANZA PAIS – PARTIDO DE INTEGRACION SOCIAL"</span>,</span>
<span id="cb4-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RENACIMIENTO UNIDO NACIONAL"</span>,</span>
<span id="cb4-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PODEMOS PERU"</span>,</span>
<span id="cb4-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UNION POR EL PERU"</span>,</span>
<span id="cb4-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PARTIDO DEMOCRATICO SOMOS PERU"</span>,</span>
<span id="cb4-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMOCRACIA DIRECTA"</span>,</span>
<span id="cb4-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PARTIDO APRISTA PERUANO"</span>,</span>
<span id="cb4-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PERU NACION"</span>,</span>
<span id="cb4-18">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FRENTE POPULAR AGRICOLA FIA DEL PERU- FREPAP"</span>,</span>
<span id="cb4-19">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PARTIDO POLITICO CONTIGO"</span>,</span>
<span id="cb4-20">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PARTIDO POLITICO NACIONAL PERU LIBRE"</span>,</span>
<span id="cb4-21">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VAMOS PERU"</span>,</span>
<span id="cb4-22">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SOLIDARIDAD NACIONAL"</span>,</span>
<span id="cb4-23">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PARTIDO POPULAR CRISTIANO - PPC"</span>)</span></code></pre></div>
</div>
<p>Del mismo modo que utilizamos una secuencia para generar el objeto <code>preferencial</code> en la primera parte, generamos una secuencia para la ubicación de los nombres de los partidos. Esta vez, la generamos directamente dentro de <code>geom_text()</code>, la función que nos permite colocar texto en un gráfico de <code>ggplot</code>. Tengamos en cuenta que el argumento <code>size</code> cambiará según el tamaño en pixeles que le hayamos asignado al gráfico<sup>1</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">cedula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cedula <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, </span>
<span id="cb5-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(</span>
<span id="cb5-5">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.8</span>, </span>
<span id="cb5-6">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.6</span>, </span>
<span id="cb5-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>), </span>
<span id="cb5-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> partidos),</span>
<span id="cb5-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontface =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>,</span>
<span id="cb5-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>,</span>
<span id="cb5-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-12">cedula</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2020-01-18-cedula-2020-ggplot2-parte-2/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="288"></p>
</div>
</div>
<p>Lo siguiente es incluir el título de la cédula. Para esto utilizamos nuevamente <code>geom_text()</code>. Esta vez será necesario utilizar un <em>linebreak</em> (<code>\n</code>) para tener el texto en dos líneas.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">cedula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cedula <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, </span>
<span id="cb6-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.6</span>, </span>
<span id="cb6-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ELECCIONES CONGRESALES</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">EXTRAORDINARIAS 2020"</span>), </span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontface =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>,</span>
<span id="cb6-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>,</span>
<span id="cb6-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineheight =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb6-9">cedula</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2020-01-18-cedula-2020-ggplot2-parte-2/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="288"></p>
</div>
</div>
<p>Incluyamos ahora las instrucciones que indican cómo votar. Nuevamente, <code>geom_text()</code> nos servirá para lograrlo. En esta ocasión incluiremos más de un <em>linebreak</em> en algunos casos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">cedula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cedula <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.3</span>, </span>
<span id="cb7-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.6</span>, </span>
<span id="cb7-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORGANIZACIÓN POLÍTICA"</span>),</span>
<span id="cb7-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontface =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>,</span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb7-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.3</span>,</span>
<span id="cb7-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.9</span>,</span>
<span id="cb7-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MARQUE CON UNA CRUZ  +   O UN ASPA   X  DENTRO DEL RECUADRO DEL SÍMBOLO</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">DE SU PREFERENCIA"</span>),</span>
<span id="cb7-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb7-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.25</span>,</span>
<span id="cb7-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.5</span>,</span>
<span id="cb7-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VOTO</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">PREFERENCIAL"</span>),</span>
<span id="cb7-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontface =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>,</span>
<span id="cb7-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.05</span>,</span>
<span id="cb7-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineheight =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb7-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.25</span>,</span>
<span id="cb7-22">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.9</span>,</span>
<span id="cb7-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SI DESEA COLOQUE DENTRO</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">DE LOS RECUADROS UNO O DOS</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">NÚMEROS DE LOS CANDIDATOS</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">DE SU PREFERENCIA"</span>),</span>
<span id="cb7-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.54</span>,</span>
<span id="cb7-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineheight =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>)</span>
<span id="cb7-26"></span>
<span id="cb7-27">cedula</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2020-01-18-cedula-2020-ggplot2-parte-2/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="288"></p>
</div>
</div>
<p>¡Cada vez estamos más cerca! El siguiente paso es incluir los logos de las agrupaciones políticas.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>En esta ocasión, el tamaño del gráfico es de 3 x 6.4 pulgadas, manteniendo la proporción del tamaño oficial.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2020-01-18-cedula-2020-ggplot2-parte-2/index.html</guid>
  <pubDate>Sat, 18 Jan 2020 00:00:00 GMT</pubDate>
  <media:content url="https://calderonsamuel.github.io/web/posts/2020-01-18-cedula-2020-ggplot2-parte-2/cedula-parte-2.png" medium="image" type="image/png" height="307" width="144"/>
</item>
<item>
  <title>Cédula Elecciones 2020 usando ggplot2 (parte 1)</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2020-01-15-cedula-2020-ggplot2-parte-1/index.html</link>
  <description><![CDATA[ 



<p>No tengo conocimiento sobre el software que ha utilizado ONPE para diseñar la cédula que se utilizará en nuestras elecciones congresales, pero es posible intentar replicarla en R, usando funciones de la colección de paquetes del <code>tidyverse</code>.</p>
<p>Para ello, primero cargamos los paquetes. Omitiré aquí los mensajes y warnings que aparecerán en una sesión normal. Además, en general utilizaré una línea por cada parámetro en las funciones que utilice, de modo que sea fácil de visualizar el código en teléfonos móviles.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<p>El siguiente paso será crear una superficie en la que irá el gráfico. Usaremos las funciones de <code>ggplot2</code> para esto y para todas las futuras personalizaciones. Utilizaremos un ancho de 15 unidades (eje x) y un alto de 32 unidades (eje y) para mantener las proporciones definidas por la ONPE en la <a href="https://busquedas.elperuano.pe/normaslegales/aprueban-modelos-definitivos-de-cedulas-de-sufragio-para-vot-resolucion-jefatural-n-000263-2019-jnonpe-1835783-1/">RESOLUCIÓN JEFATURAL Nº 000263-2019-JN/ONPE</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">cedula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># límites del plano</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>))</span>
<span id="cb2-5"></span>
<span id="cb2-6">cedula</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2020-01-15-cedula-2020-ggplot2-parte-1/index_files/figure-html/limites-1.png" class="img-fluid" width="288"></p>
</div>
</div>
<p>Debido a que las líneas divisorias y el fondo no nos ayudan para nuestros propósitos, nos vamos a deshacer de ellos usando <code>theme_void()</code>. Para mantener la referencia de los límites del gráfico, crearemos un marco con borde negro utilizando <code>geom_rect()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">cedula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cedula <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># marco rectangular con borde negro</span></span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rect</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb3-5">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, </span>
<span id="cb3-6">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb3-7">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>), </span>
<span id="cb3-8">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, </span>
<span id="cb3-9">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-10"></span>
<span id="cb3-11">cedula</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2020-01-15-cedula-2020-ggplot2-parte-1/index_files/figure-html/marco-1.png" class="img-fluid" width="288"></p>
</div>
</div>
<p>Lo siguiente es establecer el espacio que ocuparán los elementos de la cédula. En este caso, podemos llamar <code>instrucciones</code> a los marcos de texto que contienen las instrucciones de cómo votar. Los nombres de las columnas del <em>tibble</em> <code>instrucciones</code> nos permitirán identificarlos con los parámetros de <code>geom_rect()</code> cuando lo agreguemos al gráfico.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">instrucciones <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb4-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>xmin, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>xmax, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>ymin, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>ymax,</span>
<span id="cb4-3">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.8</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.4</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.9</span>,</span>
<span id="cb4-4">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.1</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.4</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.4</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.9</span>)</span>
<span id="cb4-5"></span>
<span id="cb4-6">cedula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cedula <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># contenedores debajo del título con instruciones</span></span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> instrucciones, </span>
<span id="cb4-9">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> xmin, </span>
<span id="cb4-10">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> xmax,</span>
<span id="cb4-11">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> ymin, </span>
<span id="cb4-12">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> ymax), </span>
<span id="cb4-13">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb4-14">cedula</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2020-01-15-cedula-2020-ggplot2-parte-1/index_files/figure-html/instrucciones-1.png" class="img-fluid" width="288"></p>
</div>
</div>
<p>Llamaremos<code>rectangulos</code> a los marcos en los que van contenidos los nombres de las agrupaciones políticas. Debido a que son varios contenedores y la distancia entre ellos es uniforme, crearemos los valores del eje Y usando un generador de secuencias. Los valores del eje X, en cambio, son constantes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">rectangulos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, </span>
<span id="cb5-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.8</span>, </span>
<span id="cb5-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(</span>
<span id="cb5-4">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.3</span>, </span>
<span id="cb5-5">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>, </span>
<span id="cb5-6">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>), </span>
<span id="cb5-7">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> ymin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9">cedula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cedula <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rectángulos para nombres de partidos</span></span>
<span id="cb5-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> rectangulos, </span>
<span id="cb5-12">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> xmin, </span>
<span id="cb5-13">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> xmax,</span>
<span id="cb5-14">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> ymin, </span>
<span id="cb5-15">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> ymax), </span>
<span id="cb5-16">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>)</span>
<span id="cb5-17"></span>
<span id="cb5-18">cedula</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2020-01-15-cedula-2020-ggplot2-parte-1/index_files/figure-html/rectangulos-1.png" class="img-fluid" width="288"></p>
</div>
</div>
<p>El <em>tibble</em> <code>preferencial</code> contiene los cuadrados en los que el votante puede marcar el logo de la agrupación política de su preferencia. Modificando un poco su ubicación el eje X en dos ocasiones, permitirá tener también los cuadrados de voto preferencial.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">preferencial <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.8</span>, </span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.8</span>, </span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(</span>
<span id="cb6-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.3</span>, </span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>, </span>
<span id="cb6-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>), </span>
<span id="cb6-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> ymin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-9"></span>
<span id="cb6-10">cedula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cedula <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cuadrados para logo </span></span>
<span id="cb6-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> preferencial, </span>
<span id="cb6-13">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> xmin, </span>
<span id="cb6-14">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> xmax,</span>
<span id="cb6-15">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> ymin, </span>
<span id="cb6-16">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> ymax), </span>
<span id="cb6-17">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, </span>
<span id="cb6-18">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cuadrado para voto preferencial 1</span></span>
<span id="cb6-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> preferencial, </span>
<span id="cb6-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> xmin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>, </span>
<span id="cb6-22">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> xmax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>,</span>
<span id="cb6-23">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> ymin, </span>
<span id="cb6-24">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> ymax), </span>
<span id="cb6-25">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, </span>
<span id="cb6-26">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cuadrado para voto preferencial 1</span></span>
<span id="cb6-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> preferencial, </span>
<span id="cb6-29">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> xmin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.6</span>, </span>
<span id="cb6-30">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> xmax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.6</span>,</span>
<span id="cb6-31">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> ymin, </span>
<span id="cb6-32">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> ymax), </span>
<span id="cb6-33">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, </span>
<span id="cb6-34">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb6-35"></span>
<span id="cb6-36">cedula</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://calderonsamuel.github.io/web/posts/2020-01-15-cedula-2020-ggplot2-parte-1/index_files/figure-html/preferencial-1.png" class="img-fluid" width="288"></p>
</div>
</div>
<p>En la segunda parte del post explicaré cómo agregar el texto, tanto de los nombres de los partidos políticos como de las instrucciones para votar.</p>



 ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2020-01-15-cedula-2020-ggplot2-parte-1/index.html</guid>
  <pubDate>Wed, 15 Jan 2020 00:00:00 GMT</pubDate>
  <media:content url="https://calderonsamuel.github.io/web/posts/2020-01-15-cedula-2020-ggplot2-parte-1/cedula-parte-1.png" medium="image" type="image/png" height="307" width="144"/>
</item>
<item>
  <title>Inicios</title>
  <dc:creator>Samuel Calderon</dc:creator>
  <link>https://calderonsamuel.github.io/web/posts/2020-01-13-inicios/index.html</link>
  <description><![CDATA[ 



<section id="para-qué-un-blog" class="level2">
<h2 class="anchored" data-anchor-id="para-qué-un-blog">¿Para qué un blog?</h2>
<p>Este blog se hace con la intención de compartir diferentes tipos de trabajo. Desde el año pasado emprendí la tarea de aprender el lenguaje R por mi cuenta, para ello me valí de varias plataformas en las que a través de artículos, videos, tutoriales y otros, he podido alcanzar un nivel más o menos avanzado en la comprensión del lenguaje.</p>
</section>
<section id="la-importancia-de-rstudio" class="level2">
<h2 class="anchored" data-anchor-id="la-importancia-de-rstudio">La importancia de RStudio</h2>
<p>Quiero resaltar que ha sido particularmente beneficioso que la comunidad que utiliza R es, además, especialmente activa en lo que respecta a enseñar a otros a utilizar dicha herramienta. Entre ellos destaco el trabajo que hace el equipo de <a href="https://rstudio.com/">RStudio</a>, quienes además de desarrollar el IDE más utilizado actualmente para trabajar con R, han desarrollado una serie de paquetes que facilitan el acceso al mundo del famoso “Data Science” bajo la filosofía del <a href="https://www.tidyverse.org/">tidyverse</a>. Hago una mención honrosa al paquete <em>blogdown</em>, que me permite desarrollar esta web de una manera bastante sencilla.</p>
</section>
<section id="pequeña-reseña" class="level2">
<h2 class="anchored" data-anchor-id="pequeña-reseña">Pequeña reseña</h2>
<p>Debo decir que este no es mi primer intento de tener un espacio virtual. El año 2013, cuando estaba en mi tercer año universitario, junto a un grupo de la carrera desarrollamos en Wordpress un blog llamado <em>Polinóptico</em> que tenía la intención de ser un espacio en el que estudiantes de la carrera de Ciencia Política de la Universidad Antonio Ruiz de Montoya pudieran compartir sus trabajos y ser leídos por quien quisiera. Lamentablemente ese entusiasmo no llegó a la masa de estudiantes de la carrera, y el blog murió, no sin antes haber tenido varios intentos de ser revivido.</p>
<p>Ese mismo año llevé una clase de estadística dictada por <a href="http://www.joseincio.com/">José Incio</a> en la que me fue bien. En esa clase conocí por primera vez el lenguaje R. Incio nos enseñaba conceptos de estadística descriptiva e inferencial ayudándose de scripts de R que tenía guardados, en algunas ocasiones editándolos en vivo para algún tipo de personalización, especialmente cuando se trataba de gráficos. A pesar de que trató de enseñarnos los beneficios de usar R, al final preferí prestar más atención al aprendizaje de SPSS en las clases de práctica porque resultaba más intuitivo y cercano a lo que ya conocía, Excel.</p>
<p>En los años siguientes, no tuve necesidad de usar ni Excel, ni SPSS, ni R para <strong>ningún</strong> trabajo de la universidad (no exagero), ni para ningún trabajo pagado eventual. La única excepción a esto fue la clase de Análisis de Regresión dictada por la gran Heidi Sada durante mi intercambio en la Ibero, Ciudad de México.</p>
<p>El 2014 alguien que no recuerdo ahora me presentó la plataforma Coursera en la que se podían llevar cursos MOOC de buena calidad y gratuitos. Después de llevar algunos por curiosidad, en setiembre del 2017 decidí llevar la “Data Science Specialization” de la Universidad de John Hopkins, que hacía uso intensivo de R en sus explicaciones. Fue mi segundo acercamiento al lenguaje y el primero al IDE RStudio. No terminé la especialización en Coursera porque los últimos módulos se me complicaron demasiado, y además ya tenía otro proyecto en mente.</p>
<p>Todo este interludio sobre mi llegada a R es para decir que en el verano 2018 decidí tener un blog propio en Wordpress en el que haría tutoriales sobre R. Un plan bastante ambicioso para alguien que apenas había empezado a conocer lo más básico del lenguaje. Logré hacer dos entradas, la primera sobre cómo instalar R y la segunda sobre cómo instalar RStudio. La idea era ir aprendiendo R e ir haciendo tutoriales de lo que acababa de aprender. Nunca hice público el blog porque ahí murió. Nunca le agregué más contenido.</p>
<p>Lo que sí hice ese año fue estudiar estadística aplicada y SPSS en la escuela del <a href="https://www.inei.gob.pe/enei/">INEI</a>. Aunque aprendí bastante en estos cursos, el mayor uso que le encontré fue convencerme de que R era superior.</p>
<p>Fue recién en enero del 2019 que se juntaron varias cosas que me permitieron aprender realmente el lenguaje:</p>
<ol type="1">
<li>No tenía trabajo, por lo tanto tampoco tenía dinero para matricularme en cursos.</li>
<li>Mi enamorada se fue de viaje por varios meses y yo sentía que necesitaba tener el tiempo y la cabeza ocupados en algo productivo.</li>
<li>Esta es más de ñoño. No me gusta salir en verano porque hace mucho calor en la calle y el sol es horrible, así que me la pasaba todo el tiempo en mi casa.</li>
</ol>
<p>Así fue que terminé en tiempo récord el programa de estudios <em>Data Scientist with R</em> de la plataforma <a href="https://www.datacamp.com/">Datacamp</a> e hice una shiny <a href="https://samuelcalderon.shinyapps.io/ver1-0/">app</a> para no olvidar lo que estaba aprendiendo.</p>
<p>Durante el resto del año hice todo lo posible para usar R con cualquier excusa. En esto fue de gran ayuda conocer la existencia de <a href="https://rstudio.cloud/">RStudio.cloud</a> porque me permitió usar R en el trabajo sin necesidad de pedir permiso a la oficina de tecnologías de la información para instalarlo.</p>
<p>Creé este blog en setiembre 2019 para mantener activo mi conocimiento de las funciones de los paquetes <code>blogdown</code> y <code>Rmarkdown</code>. Este es el tercer intento de blog, y para asegurarme de que funcione, esta vez lo hago público el mismo día en que me compro el dominio. Si cuento con lectores estaré muy agradecido de que me hagan llegar sugerencias de temas a tratar en el futuro. No soy un politólogo que bloguea sobre R, sino un politólogo que usa R para bloguear.</p>


</section>

 ]]></description>
  <guid>https://calderonsamuel.github.io/web/posts/2020-01-13-inicios/index.html</guid>
  <pubDate>Mon, 13 Jan 2020 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
