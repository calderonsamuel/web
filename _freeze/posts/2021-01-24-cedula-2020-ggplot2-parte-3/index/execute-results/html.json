{
  "hash": "6354845ad047d1b4b7e509ab77419895",
  "result": {
    "markdown": "---\ntitle: Cédula Elecciones 2020 usando ggplot2 (parte 3)\nauthor: Samuel Calderon\ndate: '2020-01-24'\nimage: \"cedula-parte-3.png\"\n---\n\n\nEn el [post anterior](/blog/cedula-2020-ggplot2-parte-2/) logramos agregarle texto al esqueleto de nuestra cédula. Ahora debemos aprender a agregarle imágenes. Iniciamos, como siempre, haciendo uso de nuestros paquetes predilectos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n### Lo básico\n\nPara poder entender cómo se logra insertar los logos de los partidos políticos hace falta primero entender cómo insertar imágenes a un gráfico de ggplot2. Hasta la fecha, la forma más conveniente que he encontrado es haciendo uso de `annotation_custom()`. Esta función toma como primer argumento un `grob`, un objeto que sirve como bloque básico de construcción de todos los gráficos de ggplot2. Para lo que buscamos hacer, colocar los logos de los partidos dentro del gráfico, necesitamos convertir nuestras imágenes en `grob`s. \n\nPara que R interprete nuestras imágenes, hacemos uso de la función `load.image()` del paquete `imager`. Con el objeto obtenido hacemos uso de la función `rasterGrob()` del paquete `grid`, para obtener el `grob` necesario. Finalmente, `annotation_custom()` nos permite colocar el `grob` usando una sintaxis muy similar a la que hemos usado anteriormente con  `geom_rect()`. Con el siguiente ejemplo, que usa el logo de esta página, debería quedar más claro. \n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_b98d297ec927679c8b285a3a9d57b541'}\n\n```{.r .cell-code}\nurl_ejemplo <- \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Orange_tabby_cat_sitting_on_fallen_leaves-Hisashi-01A.jpg/800px-Orange_tabby_cat_sitting_on_fallen_leaves-Hisashi-01A.jpg\"\nimagen_ejemplo <- imager::load.image(url_ejemplo)\ngrob_ejemplo <- grid::rasterGrob(imagen_ejemplo)\n\nggplot()+\n  xlim(c(0,10))+\n  ylim(c(0,10))+\n  annotation_custom(grob = grob_ejemplo,\n                    xmin = 0, xmax = 10,\n                    ymin = 0, ymax = 10)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=288}\n:::\n:::\n\n\n### Lo real\n\nAhora que hemos entendido cómo funciona el procedimiento de agregar las imágenes, estamos listos para agregar los logos a nuestra cédula. Podríamos repetir el procedimiento anterior por cada partido en contienda, sin embargo, aprovechemos las ventajas de usar R para hacerlo más rápido (no necesariamente más sencillo).\n\nLo primero será tener los enlaces a todos los logos de los partidos. Esto es posible debido a que el portal [Voto Informado](https://votoinformado.jne.gob.pe/voto) cuenta con todos ellos. El vector `logo_url` fue creado manualmente para contener todos los logos, a excepción del de **Todos por el Perú** debido a que fue eliminado de la contienda por el JNE. En nuestro vector aparece como un `NA`.\n\n\n::: {.cell hash='index_cache/html/logos_75dc7259f3ee6d7b35b80d96dfe3517e'}\n\n```{.r .cell-code}\nlogo_url <- c(\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2160.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/1366.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/1264.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/55.JPG\",\n  NA,\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/1257.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2840.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/4.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2173.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/5.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2731.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/47.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/14.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2191.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/32.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2649.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2646.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2235.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2218.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/2190.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/22.JPG\",\n  \"https://votoinformado.jne.gob.pe/voto/Resources/imgs/logoop/15.JPG\"\n)\n```\n:::\n\n\nAhora que contamos con los enlaces, creamos una función que nos permita repetir el proceso de crear los `grob`s, de tal modo que podamos usarla sistemáticamente. La función que estamos creando, `grob_url()`, devuelve los valores `NA`. El argumento `interpolate = TRUE` dentro de `grid::rasterGrob()` ayuda a mejorar la calidad de la imagen.\n\n\n::: {.cell hash='index_cache/html/grob_url_caaa6ada68786a5c6cbec55caf2e2854'}\n\n```{.r .cell-code}\ngrob_url <- function(fileurl){\n  if(is.na(fileurl)) return(NA)\n  img <- imager::load.image(fileurl)\n  grob <- grid::rasterGrob(\n    img, \n    interpolate=TRUE)\n  \n  grob\n}\n```\n:::\n\n\nAhora que contamos con una función que cumple nuestros objetivos, la aplicamos a todos los enlaces contenidos en `logo_url`. Para ello hacemos uso de la función `map()` del paquete `purrr`. Debido a que `map()` siempre nos devuelve una lista, usamos la función `tibble()` para crear un objeto *tibble* con una sola columna (grob), que contiene cada uno de nuestros `grob`s. Es el mismo nombre que el primer argumento de `annotation_custom()`, y tiene un motivo que descubriremos más adelante. El objeto `grob` ahora es una tabla que contiene listas en su única columna, pero nos permite trabajar con ella como si fuera cualquier *data.frame* normal.\n\n\n\n::: {.cell hash='index_cache/html/grob_9230994d9fc61ca2f7cf0b6008dc0520'}\n\n```{.r .cell-code}\ngrob <- map(logo_url, grob_url) %>% \n  tibble(grob = .)\n\nhead(grob)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 1\n  grob      \n  <list>    \n1 <rastrgrb>\n2 <rastrgrb>\n3 <rastrgrb>\n4 <rastrgrb>\n5 <lgl [1]> \n6 <rastrgrb>\n```\n:::\n:::\n\n\nAhora podemos hacer uso de `annotation_custom()` en cada uno de nuestros `grob`s. Recordemos los argumentos que esta función necesita:\n\n1. `grob`: Es el *grob* que será dibujado en el gráfico.\n2. `xmin`: El primer valor del eje X, o posición de la esquina izquierda de la imagen.\n3. `xmax`: El segundo valor del eje X, o posición de la esquina derecha de la imagen.\n4. `ymin`: El primer valor del eje Y, o posición de la esquina inferior de la imagen.\n5. `ymax`: El segundo valor del eje Y, o posición de la esquina superior de la imagen.\n\nYa tenemos nuestros *grobs* mapeados en el tibble `grob`, ahora necesitamos los otros cuatro argumentos. Sin embargo, estos ya los teníamos desde hace muchísimo antes. Están contenidos en el tibble `preferencial` que creamos en la [primera parte](/blog/cedula-2020-ggplot2-parte-2/) cuando usamos `geom_rect()` para dibujar los cuadros para voto preferencial.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_615749b95adf95b950e44da489b51407'}\n\n```{.r .cell-code}\nhead(preferencial)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n   xmin  xmax  ymin  ymax\n  <dbl> <dbl> <dbl> <dbl>\n1  10.8  11.8  27.3  28.3\n2  10.8  11.8  26.1  27.1\n3  10.8  11.8  24.9  25.9\n4  10.8  11.8  23.7  24.7\n5  10.8  11.8  22.5  23.5\n6  10.8  11.8  21.3  22.3\n```\n:::\n:::\n\n\nEntonces, lo que necesitamos hacer ahora es unir ambos tibbles con `bind_cols()` del paquete `dplyr()`. Luego usamos `filter()` para librarnos del valor `NA` porque ya no es útil (de hecho, si lo dejamos ocasionaremos un bug que me costó más tiempo del debido identificar). Finalmente, utilizamos `pmap()` del paquete `purrr` para usar cada fila de nuestri tibble como lista de argumentos de `annotation_custom()`. Con esto, hemos conseguido la lista `annotations` con la que podemos graficar todos los logos. \n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_0d127a189700cdf80683704df41f527a'}\n\n```{.r .cell-code}\nannotations <- grob %>% \n  bind_cols(preferencial) %>% \n  filter(!is.na(grob)) %>% \n  pmap(annotation_custom)\n```\n:::\n\n\nSin embargo, unir todos los *annotations* no es tan sencillo como hacer `cedula + annotations` debido a que `annotation_custom()` no se comporta como un `geom_*`. Será necesario crear una función que nos permita hacer una suma recursiva de todos los elementos: `rec_ggadd()` toma un objeto de `ggplot2` y una lista para añadir recursivamente sus elementos al objeto. El tercer argumento es un iterador que permite la recursividad, y no necesita ser identificado por quien use la función.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_9ce4a45e0bcc3c66943483f7799a1349'}\n\n```{.r .cell-code}\nrec_ggadd <- function(ggobj, lista, i = length(lista)){\n  if(i == 1){\n    ggobj + lista[[i]]\n  } else {\n    ggobj <- ggobj + lista[[i]]\n    rec_ggadd(ggobj, lista, i = i-1)\n  }\n}\n```\n:::\n\n\nAhora sí, sólo queda aplicar la función a nuestra `cedula` y habremos conseguido lo que tanto deseábamos.\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_cb092057206bba5857ce522d096b382e'}\n\n```{.r .cell-code}\ncedula <- rec_ggadd(cedula, annotations)\n```\n:::\n\n\nImprimimos `cedula` para ver que todo salió bien.\n\n::: {.cell hash='index_cache/html/print_bd3bd24e73a6f2a08200c7e8317aa6c4'}\n\n```{.r .cell-code}\ncedula\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_62a99048d1c68be5099d1dfee8e1b23b'}\n\n```{.r .cell-code}\nggsave(\"cedula-parte-3.png\", cedula)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 3 x 6.4 in image\n```\n:::\n:::\n\n\n![](cedula-parte-3.png){width=288px height=615px}\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}