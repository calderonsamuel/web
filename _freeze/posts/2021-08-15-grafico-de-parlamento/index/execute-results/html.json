{
  "hash": "2c048d9fe2e5e736c18e2ce9e297ee41",
  "result": {
    "markdown": "---\ntitle: '¿Cómo hacer un gráfico de parlamento en R?'\nauthor: 'Samuel Calderon'\ndate: '2020-01-29'\n---\n\n\n\n\n\nPara esta tarea vamos a hacer de uso dos paquetes principalmente: el viejo conocido `tidyverse` y también de `ggpol`, una extensión de ggplot2 desarrollada especialmente para este tipo de gráficos. `ggforce` nos servirá al final sólo para una mejora estética.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggpol)\nlibrary(ggforce)\n```\n:::\n\n\nComo en todo gráfico que se realiza con ggplot2, necesitamos primero contar con un *data.frame* o *tibble* que contenga la información necesaria para construirlo. La fuente primaria de estos datos es la web de la [ONPE](https://resultados.eleccionescongresales2020.pe/PRECE2020/), de donde se puede obtener el detalle de la votación por varios niveles de desagregación. Debido a que no es propósito de este post mostrar cómo hacer el *scrapping* de la información, ni el cálculo de las curules, voy a preferir un resumen que ya ha trabajado otra persona para graficar en base a ello.\n\nEn la web de [José Incio](http://www.joseincio.com/post/resultados-congreso-extraordinario-2020/) podemos encontrar un cuadro de la distribución de escaños del nuevo congreso peruano. Debido a que esa información aún está actualizándose según el conteo de los votos que ONPE sigue realizando, quiero hacer uso de `Sys.time()` para mostrar la hora en que estoy escribiendo este post.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nSys.time()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-05-19 11:41:38 -05\"\n```\n:::\n:::\n\n\nHaciendo uso del add-in *Paste as tribble* que el paquete `datapasta` incluye en RStudio, puedo obtenr el *tibble* `congreso`, que no es más que un copy/paste de la tabla elaborada por José Incio disponible a esta hora.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvotos <- tibble::tribble(\n                                          ~Partido, ~Escaños,\n                                  \"ACCION POPULAR\",      25L,\n                        \"ALIANZA PARA EL PROGRESO\",      22L,\n   \"FRENTE POPULAR AGRICOLA FIA DEL PERU - FREPAP\",      15L,\n                                  \"FUERZA POPULAR\",      15L,\n                               \"UNION POR EL PERU\",      13L,\n                  \"PARTIDO DEMOCRATICO SOMOS PERU\",      11L,\n                                    \"PODEMOS PERU\",      11L,\n  \"EL FRENTE AMPLIO POR JUSTICIA, VIDA Y LIBERTAD\",       9L,\n                                  \"PARTIDO MORADO\",       9L\n  )\n```\n:::\n\n\nEl siguiente paso es mejorar el *tibble* de tal modo que nos permita realizar el gráfico deseado. Empezamos por agregarle un color a cada uno de los partidos presentes en el gráfico. Podemos guiarnos de una [hoja de referencia](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) para escoger los colores, tomando en cuenta los colores partidarios. Podemos unir los colores a los partidos haciendo uso de `bind_cols()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncongreso <- tibble(\n  colores = c(\n  \"darkred\",\n  \"dodgerblue4\",\n  \"deepskyblue3\",\n  \"darkorange2\",\n  \"gold2\",\n  \"brown3\",\n  \"royalblue3\",\n  \"forestgreen\",\n  \"mediumpurple4\"\n)) %>% \n  bind_cols(votos)\n```\n:::\n\n\nAhora que contamos con los datos, simplemente realizamos el gráfico. Hacemos uso de `geom_parliament()` del paquete `ggpol`. Tan sólo necesitamos mapear dos argumentos:\n\n1. `seats`: la cantidad de escaños o *asientos* obtenidos\n2. `fill`: el nombre de los partidos\n\nAdemás de eso, usaremos `scale_fill_manual()` para utilizar nuestros colores personalizados y el nombre de los partidos en la leyenda del gráfico. Luego, `coord_fixed()` nos ayuda a preservar el ratio de aspecto del gráfico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrafico <- ggplot(congreso)+\n  geom_parliament(\n    aes(\n      seats = Escaños, \n      fill = Partido), \n    color = \"white\") +\n  scale_fill_manual(\n    values = congreso$colores, \n    labels = congreso$Partido) +\n  coord_fixed()\n\nprint(grafico)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/grafico-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nVemos que hemos obtenido el gráfico y los partidos aparecen pintados con los colores que hemos asignado. Sin embargo, aún es posible hacerle unas mejoras estéticas. Usamos `theme_no_axes()` del paquete `ggforce` para eliminar las líneas guía de nuestro plano cartesiano y quedarnos sólo con un marco negro. También usamos `labs()` para agregarle un título a nuestro gráfico y `theme()` para cambiar el tamaño de los elementos de nuestra leyenda.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrafico +\n  theme_no_axes() +\n  labs(\n    title = \"DISTRIBUCIÓN DE ESCAÑOS\") +\n  theme(\n    legend.text = element_text(\n      size=5),\n    legend.key.size = unit(\n      x = 3, \n      units = \"mm\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/final-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nYa tenemos un gráfico más presentable y sencillo de replicar.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}