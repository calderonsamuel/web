{
  "hash": "80aeaad7296d11fc4c03c3c961f99855",
  "result": {
    "markdown": "---\ntitle: \"Patience is overrated â€“ embrace the thrill of parsing streaming data as it arrives!\"\nauthor: Samuel Calderon\ndate: \"2023-12-14\"\nknitr:\n  opts_chunk:\n    comment: \"#>\"\n    class-output: \"text-muted\"\n    class-error: \"text-danger\"\n---\n\n\nThis post has two objectives: present some projects that use \"ChatGPT\" technology to help R developers, and to present a package that can help all of them.\n\nOne year ago, with the launch of [ChatGPT](https://chat.openai.com/chat), the world found itself astonished by the profound impact this conversational AI model had made across various domains. The tech community was particularly surprised by the model's versatility, successfully powering chatbots, virtual assistants, and aiding developers in diverse applications. How did the R community take advantage of this?\n\n## LLMs for the R developer's workflow\n\nOnce OpenAI allowed developers to use its API, the R community started to see different initiatives for incorporating this service, and similar ones, into their workflows. OpenAI lists the [`{rgpt3`}](https://github.com/ben-aaron188/rgpt3) package in its community library page, but we can also find the [`{openai}`](https://github.com/irudnyts/openai/) package which supports more recent endpoints. There is also the [`{chatgpt}`](https://github.com/jcrodriguez1989/chatgpt) package, which provides a chat interface that runs in the R console itself.\n\nFor VSCode users, the [Genie extension](https://github.com/ai-genie/chatgpt-vscode) provides lots of features integrating the OpenAI service using the contents of the files in your projects, and providing a UI where you can interact with the AI models exactly as you would do using ChatGPT. For Docker enthusiasts, you can use [chatbot-ui](https://github.com/mckaywrigley/chatbot-ui) to easily host your own chat UI using OpenAI's API under the hood.\n\nAll the services mentioned above require you to have an OpenAI account and a valid API key, that allows the AI giant to charge you for its usage.\n\nFor Rstudio users, we have two packages providing similar functionality for using a chat interface without ever needing to leave the RStudio IDE itself. The [`{chattr}`](https://github.com/mlverse/chattr) package provides a chat interface that can be accessed in the \"Viewer\" pane of RStudio. You can also use the `chattr()` function *in source* to directly give instructions to the AI assistant. The package supports using the OpenAI API or a self hosted (free) LLamaGPT executable. Even though it is not yet in CRAN, having the Posit PBC as the copyright holder of the package, you can expect it to keep receiving updates.\n\nThe second package is called [`{gptstudio}`](https://github.com/MichelNivard/gptstudio) and requires that I make a disclaimer: I'm one of the co-authors. This package also provides a chat interface as a Rstudio addin, but in this case it runs as a background job. This means that you don't have to close the chat when you need to use the R console. Sadly, currently this also means that you can't directly use your documents content as context for the chat assistant, as background jobs don't run in the same R session that the RStudio IDE uses.\n\nWhile we work on overcoming this challenge, we provide the following features:\n\n- Every code chunk produced by the AI assistant can be saved to the clipboard with a single click.\n- You can save your conversations to be continued later.\n- You can change the chat settings per session, or save a default configuration. All without leaving the chat UI.\n- You can add R help pages as chat context for every package you have installed locally. This is very useful to receive assistance in the latest trends in the R ecosystem instead of having to wait for AI giants to update the cutoff date of their models. Use a \"package:object\" string anywhere in your prompt to accomplish this (e.g. \"Help me with dplyr::join_by\").\n- The UI has support for internationalization. We currently support English, Spanish and German. We are open to receive more translations.\n- We support *streaming* messages, meaning you can start reading a response before it has fully arrived (just like in ChatGPT).\n- The chat UI inherits your RStudio IDE theme, to give a more \"built-in\" look. You can start the chat as an RStudio addin (even set up a custom keyboard shortcut).\n- You can choose your model. While the default option is to use the OpenAI's \"gpt-3.5-turbo\" model, you can choose any of the current OpenAI models, such as \"gpt-4\" or \"gpt-3.5-turbo-16k\".\n- You can choose your service. While OpenAI offers many good models, we also support using \"Huggingface\", \"Anthropic\", \"Azure OpenAI\" and \"Palm\", each one of them provides many models. \n\nWe are also working on supporting self hosted services/models, such as [`{ollama}`](https://github.com/calderonsamuel/ollama). For all these services, we use R's functional OOP system, which I'm [currently reworking](https://github.com/calderonsamuel/skellm) to use the more explicit [S7 system](https://github.com/RConsortium/S7).\n\nEach one of these features has meant great effort on our side, so we hope they help your workflow. We also hope you can let us know if you find any issue or bug.\n\n## Addressing a small, but common pain\n\nUsing APIs means that you have to use HTTP requests. Expecting to receive streaming data adds complexity to this, as you need to do something with the incoming data before it fully arrives. OpenAI uses Server-Sent Events communication (SSE) for streaming responses, enabling a unidirectional communication channel based on a single, long-lived HTTP connection that allows the server to send periodic updates to the connected clients. \n\nServer-Sent Events come in *chunks*, here you have an example:\n\n```\ndata: This is the first chunk, it has one line\n\ndata: This is the second chunk\nextra: It has two lines\n\ndata: This is the third chunk, it has an id field. This is common.\nid: 123\n\n: Lines that start with a colon are comments, they don't hold data\ndata: This is the forth chunk, it has a comment\n\ndata: This is the fifth chunk. Normally you will receive a data field\ncustom: But the server can send custom field names.\n```\n\nYou can imagine that in order to use the incoming data, we need to parse the text received. While this might seem trivial, until now each package that streams data from OpenAI has implemeted its own way of parsing the incoming chunks. There should be a standard way. In fact, Server-Sent Events date back to at least 2006, and there is a [HTML specification](https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream) that provides instructions for browsers and other clients on how to parse them.\n\nAfter taking into account those instructions, I'm excited to announce the release of version 0.1.0 of the SSEparser R package, designed to provide robust functionality for parsing Server-Sent Events (SSE) and building upon them. This package is a valuable tool for data analysts and software engineers working with real-time streaming data.\n\n### Installation\n\nYou can easily install the SSEparser package from CRAN using the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"SSEparser\")\n```\n:::\n\n\nFor those who prefer to live on the bleeding edge, the development version can be installed with the pak package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"calderonsamuel/SSEparser\")\n```\n:::\n\n\n### Example Usage\n\nLet's delve into a simple example to showcase the power of the SSEparser package. The `parse_sse()` function takes a string containing a server-sent event and converts it into an R list. Check out the example below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(SSEparser)\n\nevent <- \"data: test\\nevent: message\\nid: 123\\n\\n\"\n\nparse_sse(event)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.text-muted}\n#> [[1]]\n#> [[1]]$data\n#> [1] \"test\"\n#> \n#> [[1]]$event\n#> [1] \"message\"\n#> \n#> [[1]]$id\n#> [1] \"123\"\n```\n:::\n:::\n\n\nThe package also handles comments in the event stream gracefully, ensuring they are not parsed.\n\n### Use in HTTP Requests\n\nSSEparser goes beyond simple event parsing; it seamlessly integrates with HTTP requests for real-time streaming data. The code snippet below demonstrates handling an HTTP request with MIME type \"text/event-stream\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparser <- SSEparser$new()\n\nresponse <- httr2::request(\"https://postman-echo.com/server-events/3\") %>%\n    httr2::req_body_json(data = list(\n        event = \"message\",\n        request = \"POST\"\n    )) %>%\n    httr2::req_perform_stream(callback = \\(x) {\n        event <- rawToChar(x)\n        parser$parse_sse(event)\n        TRUE\n    })\n\nstr(parser$events)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.text-muted}\n#> List of 3\n#>  $ :List of 3\n#>   ..$ event: chr \"info\"\n#>   ..$ data : chr \"{\\\"event\\\":\\\"message\\\",\\\"request\\\":\\\"POST\\\"}\"\n#>   ..$ id   : chr \"1\"\n#>  $ :List of 3\n#>   ..$ event: chr \"ping\"\n#>   ..$ data : chr \"{\\\"event\\\":\\\"message\\\",\\\"request\\\":\\\"POST\\\"}\"\n#>   ..$ id   : chr \"2\"\n#>  $ :List of 3\n#>   ..$ event: chr \"notification\"\n#>   ..$ data : chr \"{\\\"event\\\":\\\"message\\\",\\\"request\\\":\\\"POST\\\"}\"\n#>   ..$ id   : chr \"3\"\n```\n:::\n:::\n\n\nThis example illustrates parsing multiple events from a streaming data source.\n\n### Extending SSEparser\n\nOne of the strengths of SSEparser is its extensibility. Suppose you want to parse the content of every data field into an R list instead of a JSON string. In that case, you can easily create a custom parser by inheriting from the SSEparser class. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCustomParser <- R6::R6Class(\n    classname = \"CustomParser\",\n    inherit = SSEparser,\n    public = list(\n        initialize = function() {\n            super$initialize()\n        },\n        append_parsed_sse = function(parsed_event) {\n            parsed_event$data <- jsonlite::fromJSON(parsed_event$data)\n            self$events = c(self$events, list(parsed_event))\n            invisible(self)\n        }\n    )\n)\n```\n:::\n\n\nNow you can use your custom parser for streaming data with the same ease:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparser <- CustomParser$new()\n\nresponse <- httr2::request(\"https://postman-echo.com/server-events/3\") %>%\n    httr2::req_body_json(data = list(\n        event = \"message\",\n        request = \"POST\"\n    )) %>%\n    httr2::req_perform_stream(callback = \\(x) {\n        event <- rawToChar(x)\n        parser$parse_sse(event)\n        TRUE\n    })\n\nstr(parser$events)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.text-muted}\n#> List of 3\n#>  $ :List of 3\n#>   ..$ event: chr \"info\"\n#>   ..$ data :List of 2\n#>   .. ..$ event  : chr \"message\"\n#>   .. ..$ request: chr \"POST\"\n#>   ..$ id   : chr \"1\"\n#>  $ :List of 3\n#>   ..$ event: chr \"message\"\n#>   ..$ data :List of 2\n#>   .. ..$ event  : chr \"message\"\n#>   .. ..$ request: chr \"POST\"\n#>   ..$ id   : chr \"2\"\n#>  $ :List of 3\n#>   ..$ event: chr \"message\"\n#>   ..$ data :List of 2\n#>   .. ..$ event  : chr \"message\"\n#>   .. ..$ request: chr \"POST\"\n#>   ..$ id   : chr \"3\"\n```\n:::\n:::\n\n\nWith SSEparser v0.1.0, you have a powerful tool at your disposal for handling and parsing Server-Sent Events efficiently. Feel free to explore its features and enhance your real-time streaming data workflows.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}